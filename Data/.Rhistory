alter.type
length(alter.i)
alter.i
alter.type
rep(ego.df[i],length(alter.i)
)
# Vertex ego list
ego.df <- as.vector(vertex.test.df$ego)
# Setting connections
max_connections = 10
alter.test.df<-data.frame()
conn_types<-c("In-Network","Out-of-Network","Shared-Profession")
alter.outnetwork.num<-100
alter.outnetwork.df <- randomNames(alter.outnetwork.num, which.names="both",ethnicity = c(1:2),name.order="last.first",name.sep=", ")
alter.outnetwork.df <- alter.outnetwork.df[!alter.outnetwork.df %in% ego.df]
for(i in 1:length(ego.df)){
ego.df.rm <- ego.df[!ego.df == ego.df[i]]
#alter.outnetwork.df
professional.names<-ego.df[which(vertex.test.df[,2]==as.character(vertex.test.df[i,2]))]
professional.names.rm<- professional.names[!professional.names == ego.df[i]]
#names.sample.list<-c(ego.df.rm,alter.outnetwork.df,professional.names.rm)
sample_connections<-sample(2:max_connections, 1, replace=FALSE)
sample_prob<-sample(conn_types, sample_connections, replace = T, p = c(0.1,0.1,0.8))
#
sample.In_Network<-length(which(sample_prob == conn_types[1]))
sample.Out_Network<-length(which(sample_prob == conn_types[2]))
sample.Profess_Link<-length(which(sample_prob == conn_types[3]))
alter.innetwork.i <- sample(ego.df.rm,sample.In_Network,replace = FALSE)
alter.outnetwork.i <- sample(alter.outnetwork.df,sample.Out_Network,replace = FALSE)
alter.profession.i <- sample(professional.names.rm,sample.Profess_Link,replace = FALSE)
#alter.i <- sample(names.sample.list,sample(1:max_connections,1),replace = FALSE)
alter.i<-c(alter.innetwork.i,alter.outnetwork.i,alter.profession.i)
alter.type<-c(rep("In-Network",sample.In_Network),rep("Out-Network",sample.Out_Network),rep("Shared-Profession",sample.Profess_Link))
#Check to make sure names are not repeated in vector
# alter.i<-union(alter.i,alter.i)
# which(duplicated(alter.i)==TRUE)
# alter.i<-alter.i[-c(which(duplicated(alter.i)==TRUE))]
# alter.type<-alter.type[-c(which(duplicated(alter.i)==TRUE))]
if(length(which(duplicated(alter.i)==TRUE))>0){
Rm.num<-which(duplicated(alter.i)==TRUE)
alter.i.check<-alter.i[-c(Rm.num)]
alter.type.check<-alter.type[-c(Rm.num)]
print(paste0("Removed elemements # ",Rm.num,"from ", ego.df[i]," (ego number ",i," out of ",length(ego.df),")"))
}
alter.df.i <- cbind(rep(ego.df[i],length(alter.i.check)),alter.i.check,alter.type.check)
alter.test.df <- rbind(alter.test.df,alter.df.i)
#print(paste0("Alter generated for ",ego.df[i]," (ego number ",i," out of ",length(ego.df),")"))
}
alter.type.check<-alter.type
# Setting connections
max_connections = 10
alter.test.df<-data.frame()
conn_types<-c("In-Network","Out-of-Network","Shared-Profession")
alter.outnetwork.num<-100
alter.outnetwork.df <- randomNames(alter.outnetwork.num, which.names="both",ethnicity = c(1:2),name.order="last.first",name.sep=", ")
alter.outnetwork.df <- alter.outnetwork.df[!alter.outnetwork.df %in% ego.df]
for(i in 1:length(ego.df)){
ego.df.rm <- ego.df[!ego.df == ego.df[i]]
#alter.outnetwork.df
professional.names<-ego.df[which(vertex.test.df[,2]==as.character(vertex.test.df[i,2]))]
professional.names.rm<- professional.names[!professional.names == ego.df[i]]
#names.sample.list<-c(ego.df.rm,alter.outnetwork.df,professional.names.rm)
sample_connections<-sample(2:max_connections, 1, replace=FALSE)
sample_prob<-sample(conn_types, sample_connections, replace = T, p = c(0.1,0.1,0.8))
#
sample.In_Network<-length(which(sample_prob == conn_types[1]))
sample.Out_Network<-length(which(sample_prob == conn_types[2]))
sample.Profess_Link<-length(which(sample_prob == conn_types[3]))
alter.innetwork.i <- sample(ego.df.rm,sample.In_Network,replace = FALSE)
alter.outnetwork.i <- sample(alter.outnetwork.df,sample.Out_Network,replace = FALSE)
alter.profession.i <- sample(professional.names.rm,sample.Profess_Link,replace = FALSE)
#alter.i <- sample(names.sample.list,sample(1:max_connections,1),replace = FALSE)
alter.i<-c(alter.innetwork.i,alter.outnetwork.i,alter.profession.i)
alter.type<-c(rep("In-Network",sample.In_Network),rep("Out-Network",sample.Out_Network),rep("Shared-Profession",sample.Profess_Link))
#Check to make sure names are not repeated in vector
# alter.i<-union(alter.i,alter.i)
# which(duplicated(alter.i)==TRUE)
# alter.i<-alter.i[-c(which(duplicated(alter.i)==TRUE))]
# alter.type<-alter.type[-c(which(duplicated(alter.i)==TRUE))]
if(length(which(duplicated(alter.i)==TRUE))>0){
Rm.num<-which(duplicated(alter.i)==TRUE)
alter.i.check<-alter.i[-c(Rm.num)]
alter.type.check<-alter.type[-c(Rm.num)]
print(paste0("Removed elemements # ",Rm.num,"from ", ego.df[i]," (ego number ",i," out of ",length(ego.df),")"))
}else{
alter.i.check<-alter.i
alter.type.check<-alter.type
}
alter.df.i <- cbind(rep(ego.df[i],length(alter.i.check)),alter.i.check,alter.type.check)
alter.test.df <- rbind(alter.test.df,alter.df.i)
#print(paste0("Alter generated for ",ego.df[i]," (ego number ",i," out of ",length(ego.df),")"))
}
str(alter.test.df)
print(paste0("Removed duplicate elemements # ",Rm.num,"from ", ego.df[i]," (ego number ",i," out of ",length(ego.df),")"))
print(paste0("Removed duplicate elemements # ",Rm.num," from ", ego.df[i]," (ego number ",i," out of ",length(ego.df),")"))
if(length(which(duplicated(alter.i)==TRUE))>0){
Rm.num<-which(duplicated(alter.i)==TRUE)
alter.i.check<-alter.i[-c(Rm.num)]
alter.type.check<-alter.type[-c(Rm.num)]
print(paste0("Removed duplicate elemements # ",Rm.num," from ", ego.df[i]," (ego number ",i," out of ",length(ego.df),")"))
}else{
alter.i.check<-alter.i
alter.type.check<-alter.type
}
alter.df.i <- cbind(rep(ego.df[i],length(alter.i.check)),alter.i.check,alter.type.check)
alter.outnetwork.i <- sample(alter.outnetwork.df,sample.Out_Network,replace = FALSE)
for(i in 1:length(ego.df)){
ego.df.rm <- ego.df[!ego.df == ego.df[i]]
#alter.outnetwork.df
professional.names<-ego.df[which(vertex.test.df[,2]==as.character(vertex.test.df[i,2]))]
professional.names.rm<- professional.names[!professional.names == ego.df[i]]
#names.sample.list<-c(ego.df.rm,alter.outnetwork.df,professional.names.rm)
sample_connections<-sample(2:max_connections, 1, replace=FALSE)
sample_prob<-sample(conn_types, sample_connections, replace = T, p = c(0.1,0.1,0.8))
#
sample.In_Network<-length(which(sample_prob == conn_types[1]))
sample.Out_Network<-length(which(sample_prob == conn_types[2]))
sample.Profess_Link<-length(which(sample_prob == conn_types[3]))
alter.innetwork.i <- sample(ego.df.rm,sample.In_Network,replace = FALSE)
alter.outnetwork.i <- sample(alter.outnetwork.df,sample.Out_Network,replace = FALSE)
alter.profession.i <- sample(professional.names.rm,sample.Profess_Link,replace = FALSE)
#alter.i <- sample(names.sample.list,sample(1:max_connections,1),replace = FALSE)
alter.i<-c(alter.innetwork.i,alter.outnetwork.i,alter.profession.i)
alter.type<-c(rep("In-Network",sample.In_Network),rep("Out-Network",sample.Out_Network),rep("Shared-Profession",sample.Profess_Link))
#Check to make sure names are not repeated in vector
# alter.i<-union(alter.i,alter.i)
# which(duplicated(alter.i)==TRUE)
# alter.i<-alter.i[-c(which(duplicated(alter.i)==TRUE))]
# alter.type<-alter.type[-c(which(duplicated(alter.i)==TRUE))]
if(length(which(duplicated(alter.i)==TRUE))>0){
Rm.num<-which(duplicated(alter.i)==TRUE)
alter.i.check<-alter.i[-c(Rm.num)]
alter.type.check<-alter.type[-c(Rm.num)]
print(paste0("Removed duplicate elemements # ",Rm.num," from ", ego.df[i]," (ego number ",i," out of ",length(ego.df),")"))
}else{
alter.i.check<-alter.i
alter.type.check<-alter.type
}
alter.df.i <- cbind(rep(ego.df[i],length(alter.i.check)),alter.i.check,alter.type.check)
alter.test.df <- rbind(alter.test.df,alter.df.i)
#print(paste0("Alter generated for ",ego.df[i]," (ego number ",i," out of ",length(ego.df),")"))
}
for(i in 1:length(ego.df)){
ego.df.rm <- ego.df[!ego.df == ego.df[i]]
#alter.outnetwork.df
professional.names<-ego.df[which(vertex.test.df[,2]==as.character(vertex.test.df[i,2]))]
professional.names.rm<- professional.names[!professional.names == ego.df[i]]
#names.sample.list<-c(ego.df.rm,alter.outnetwork.df,professional.names.rm)
sample_connections<-sample(2:max_connections, 1, replace=FALSE)
sample_prob<-sample(conn_types, sample_connections, replace = T, p = c(0.1,0.1,0.8))
#
sample.In_Network<-length(which(sample_prob == conn_types[1]))
sample.Out_Network<-length(which(sample_prob == conn_types[2]))
sample.Profess_Link<-length(which(sample_prob == conn_types[3]))
alter.innetwork.i <- sample(ego.df.rm,sample.In_Network,replace = FALSE)
alter.outnetwork.i <- sample(alter.outnetwork.df,sample.Out_Network,replace = FALSE)
alter.profession.i <- sample(professional.names.rm,sample.Profess_Link,replace = FALSE)
#alter.i <- sample(names.sample.list,sample(1:max_connections,1),replace = FALSE)
alter.i<-c(alter.innetwork.i,alter.outnetwork.i,alter.profession.i)
alter.type<-c(rep("In-Network",sample.In_Network),rep("Out-Network",sample.Out_Network),rep("Shared-Profession",sample.Profess_Link))
#Check to make sure names are not repeated in vector
# alter.i<-union(alter.i,alter.i)
# which(duplicated(alter.i)==TRUE)
# alter.i<-alter.i[-c(which(duplicated(alter.i)==TRUE))]
# alter.type<-alter.type[-c(which(duplicated(alter.i)==TRUE))]
if(length(which(duplicated(alter.i)==TRUE))>0){
Rm.num<-which(duplicated(alter.i)==TRUE)
alter.i.check<-alter.i[-c(Rm.num)]
alter.type.check<-alter.type[-c(Rm.num)]
print(paste0("Removed duplicate elemements # ",Rm.num," from ", ego.df[i]," (ego number ",i," out of ",length(ego.df),")"))
}else{
alter.i.check<-alter.i
alter.type.check<-alter.type
}
alter.df.i <- cbind(rep(ego.df[i],length(alter.i.check)),alter.i.check,alter.type.check)
alter.test.df <- rbind(alter.test.df,alter.df.i)
#print(paste0("Alter generated for ",ego.df[i]," (ego number ",i," out of ",length(ego.df),")"))
}
for(i in 1:length(ego.df)){
ego.df.rm <- ego.df[!ego.df == ego.df[i]]
#alter.outnetwork.df
professional.names<-ego.df[which(vertex.test.df[,2]==as.character(vertex.test.df[i,2]))]
professional.names.rm<- professional.names[!professional.names == ego.df[i]]
#names.sample.list<-c(ego.df.rm,alter.outnetwork.df,professional.names.rm)
sample_connections<-sample(2:max_connections, 1, replace=FALSE)
sample_prob<-sample(conn_types, sample_connections, replace = T, p = c(0.1,0.1,0.8))
#
sample.In_Network<-length(which(sample_prob == conn_types[1]))
sample.Out_Network<-length(which(sample_prob == conn_types[2]))
sample.Profess_Link<-length(which(sample_prob == conn_types[3]))
alter.innetwork.i <- sample(ego.df.rm,sample.In_Network,replace = FALSE)
alter.outnetwork.i <- sample(alter.outnetwork.df,sample.Out_Network,replace = FALSE)
alter.profession.i <- sample(professional.names.rm,sample.Profess_Link,replace = FALSE)
#alter.i <- sample(names.sample.list,sample(1:max_connections,1),replace = FALSE)
alter.i<-c(alter.innetwork.i,alter.outnetwork.i,alter.profession.i)
alter.type<-c(rep("In-Network",sample.In_Network),rep("Out-Network",sample.Out_Network),rep("Shared-Profession",sample.Profess_Link))
#Check to make sure names are not repeated in vector
# alter.i<-union(alter.i,alter.i)
# which(duplicated(alter.i)==TRUE)
# alter.i<-alter.i[-c(which(duplicated(alter.i)==TRUE))]
# alter.type<-alter.type[-c(which(duplicated(alter.i)==TRUE))]
if(length(which(duplicated(alter.i)==TRUE))>0){
Rm.num<-which(duplicated(alter.i)==TRUE)
alter.i.check<-alter.i[-c(Rm.num)]
alter.type.check<-alter.type[-c(Rm.num)]
print(paste0("Removed duplicate elemements # ",Rm.num," from ", ego.df[i]," (ego number ",i," out of ",length(ego.df),")"))
}else{
alter.i.check<-alter.i
alter.type.check<-alter.type
}
alter.df.i <- cbind(rep(ego.df[i],length(alter.i.check)),alter.i.check,alter.type.check)
alter.test.df <- rbind(alter.test.df,alter.df.i)
#print(paste0("Alter generated for ",ego.df[i]," (ego number ",i," out of ",length(ego.df),")"))
}
for(i in 1:length(ego.df)){
ego.df.rm <- ego.df[!ego.df == ego.df[i]]
#alter.outnetwork.df
professional.names<-ego.df[which(vertex.test.df[,2]==as.character(vertex.test.df[i,2]))]
professional.names.rm<- professional.names[!professional.names == ego.df[i]]
#names.sample.list<-c(ego.df.rm,alter.outnetwork.df,professional.names.rm)
sample_connections<-sample(2:max_connections, 1, replace=FALSE)
sample_prob<-sample(conn_types, sample_connections, replace = T, p = c(0.1,0.1,0.8))
#
sample.In_Network<-length(which(sample_prob == conn_types[1]))
sample.Out_Network<-length(which(sample_prob == conn_types[2]))
sample.Profess_Link<-length(which(sample_prob == conn_types[3]))
alter.innetwork.i <- sample(ego.df.rm,sample.In_Network,replace = FALSE)
alter.outnetwork.i <- sample(alter.outnetwork.df,sample.Out_Network,replace = FALSE)
alter.profession.i <- sample(professional.names.rm,sample.Profess_Link,replace = FALSE)
#alter.i <- sample(names.sample.list,sample(1:max_connections,1),replace = FALSE)
alter.i<-c(alter.innetwork.i,alter.outnetwork.i,alter.profession.i)
alter.type<-c(rep("In-Network",sample.In_Network),rep("Out-Network",sample.Out_Network),rep("Shared-Profession",sample.Profess_Link))
#Check to make sure names are not repeated in vector
# alter.i<-union(alter.i,alter.i)
# which(duplicated(alter.i)==TRUE)
# alter.i<-alter.i[-c(which(duplicated(alter.i)==TRUE))]
# alter.type<-alter.type[-c(which(duplicated(alter.i)==TRUE))]
if(length(which(duplicated(alter.i)==TRUE))>0){
Rm.num<-which(duplicated(alter.i)==TRUE)
alter.i.check<-alter.i[-c(Rm.num)]
alter.type.check<-alter.type[-c(Rm.num)]
print(paste0("Removed duplicate elemements # ",Rm.num," from ", ego.df[i]," (ego number ",i," out of ",length(ego.df),")"))
}else{
alter.i.check<-alter.i
alter.type.check<-alter.type
}
alter.df.i <- cbind(rep(ego.df[i],length(alter.i.check)),alter.i.check,alter.type.check)
alter.test.df <- rbind(alter.test.df,alter.df.i)
#print(paste0("Alter generated for ",ego.df[i]," (ego number ",i," out of ",length(ego.df),")"))
}
for(i in 1:length(ego.df)){
ego.df.rm <- ego.df[!ego.df == ego.df[i]]
#alter.outnetwork.df
professional.names<-ego.df[which(vertex.test.df[,2]==as.character(vertex.test.df[i,2]))]
professional.names.rm<- professional.names[!professional.names == ego.df[i]]
#names.sample.list<-c(ego.df.rm,alter.outnetwork.df,professional.names.rm)
sample_connections<-sample(2:max_connections, 1, replace=FALSE)
sample_prob<-sample(conn_types, sample_connections, replace = T, p = c(0.1,0.1,0.8))
#
sample.In_Network<-length(which(sample_prob == conn_types[1]))
sample.Out_Network<-length(which(sample_prob == conn_types[2]))
sample.Profess_Link<-length(which(sample_prob == conn_types[3]))
alter.innetwork.i <- sample(ego.df.rm,sample.In_Network,replace = FALSE)
alter.outnetwork.i <- sample(alter.outnetwork.df,sample.Out_Network,replace = FALSE)
alter.profession.i <- sample(professional.names.rm,sample.Profess_Link,replace = FALSE)
#alter.i <- sample(names.sample.list,sample(1:max_connections,1),replace = FALSE)
alter.i<-c(alter.innetwork.i,alter.outnetwork.i,alter.profession.i)
alter.type<-c(rep("In-Network",sample.In_Network),rep("Out-Network",sample.Out_Network),rep("Shared-Profession",sample.Profess_Link))
#Check to make sure names are not repeated in vector
# alter.i<-union(alter.i,alter.i)
# which(duplicated(alter.i)==TRUE)
# alter.i<-alter.i[-c(which(duplicated(alter.i)==TRUE))]
# alter.type<-alter.type[-c(which(duplicated(alter.i)==TRUE))]
if(length(which(duplicated(alter.i)==TRUE))>0){
Rm.num<-which(duplicated(alter.i)==TRUE)
alter.i.check<-alter.i[-c(Rm.num)]
alter.type.check<-alter.type[-c(Rm.num)]
print(paste0("Removed duplicate elemements # ",Rm.num," from ", ego.df[i]," (ego number ",i," out of ",length(ego.df),")"))
}else{
alter.i.check<-alter.i
alter.type.check<-alter.type
}
alter.df.i <- cbind(rep(ego.df[i],length(alter.i.check)),alter.i.check,alter.type.check)
alter.test.df <- rbind(alter.test.df,alter.df.i)
#print(paste0("Alter generated for ",ego.df[i]," (ego number ",i," out of ",length(ego.df),")"))
}
# Vertex ego list
ego.df <- as.vector(vertex.test.df$ego)
# Setting connections
max_connections = 10
alter.test.df<-data.frame()
conn_types<-c("In-Network","Out-of-Network","Shared-Profession")
alter.outnetwork.num<-100
alter.outnetwork.df <- randomNames(alter.outnetwork.num, which.names="both",ethnicity = c(1:2),name.order="last.first",name.sep=", ")
alter.outnetwork.df <- alter.outnetwork.df[!alter.outnetwork.df %in% ego.df]
for(i in 1:length(ego.df)){
ego.df.rm <- ego.df[!ego.df == ego.df[i]]
#alter.outnetwork.df
professional.names<-ego.df[which(vertex.test.df[,2]==as.character(vertex.test.df[i,2]))]
professional.names.rm<- professional.names[!professional.names == ego.df[i]]
#names.sample.list<-c(ego.df.rm,alter.outnetwork.df,professional.names.rm)
sample_connections<-sample(2:max_connections, 1, replace=FALSE)
sample_prob<-sample(conn_types, sample_connections, replace = T, p = c(0.1,0.1,0.8))
#
sample.In_Network<-length(which(sample_prob == conn_types[1]))
sample.Out_Network<-length(which(sample_prob == conn_types[2]))
sample.Profess_Link<-length(which(sample_prob == conn_types[3]))
alter.innetwork.i <- sample(ego.df.rm,sample.In_Network,replace = FALSE)
alter.outnetwork.i <- sample(alter.outnetwork.df,sample.Out_Network,replace = FALSE)
alter.profession.i <- sample(professional.names.rm,sample.Profess_Link,replace = FALSE)
#alter.i <- sample(names.sample.list,sample(1:max_connections,1),replace = FALSE)
alter.i<-c(alter.innetwork.i,alter.outnetwork.i,alter.profession.i)
alter.type<-c(rep("In-Network",sample.In_Network),rep("Out-Network",sample.Out_Network),rep("Shared-Profession",sample.Profess_Link))
#Check to make sure names are not repeated in vector
# alter.i<-union(alter.i,alter.i)
# which(duplicated(alter.i)==TRUE)
# alter.i<-alter.i[-c(which(duplicated(alter.i)==TRUE))]
# alter.type<-alter.type[-c(which(duplicated(alter.i)==TRUE))]
if(length(which(duplicated(alter.i)==TRUE))>0){
Rm.num<-which(duplicated(alter.i)==TRUE)
alter.i.check<-alter.i[-c(Rm.num)]
alter.type.check<-alter.type[-c(Rm.num)]
print(paste0("Removed duplicate elemements # ",Rm.num," from ", ego.df[i]," (ego number ",i," out of ",length(ego.df),")"))
}else{
alter.i.check<-alter.i
alter.type.check<-alter.type
}
alter.df.i <- cbind(rep(ego.df[i],length(alter.i.check)),alter.i.check,alter.type.check)
alter.test.df <- rbind(alter.test.df,alter.df.i)
#print(paste0("Alter generated for ",ego.df[i]," (ego number ",i," out of ",length(ego.df),")"))
}
str(alter.test.df)
names(alter.test.df)<-c("ego","alter","alter_type")
# tag for vertex sheet questions = ".vq"
vq<-ls(pattern = ".vq")
vertex.test.df <-as.data.frame(cbind(ego.df, profession.df,as.data.frame(mget(vq))))
names(vertex.test.df)[1]="ego"
Out_Network_Names<-unique(alter.test.df[which(alter.test.df$alter_type=="Out-Network"),2])
for(k in 1:length(Out_Network_Names)){
Name.k<-as.character(Out_Network_Names[k])
Out_Network<-as.character("Out-Network")
Out.row.k<-c(Name.k,Out_Network,rep("N/A",(length(colnames(vertex.test.df))-2)))
Out.row.k<-as.data.frame(t(Out.row.k))
colnames(Out.row.k)<-colnames(vertex.test.df)
vertex.test.df<-rbind(vertex.test.df,Out.row.k)
}
tail(vertex.test.df)
duplicated(vertex.test.df$ego)
vertex_test$ego[duplicated(vertex.test.df$ego)]
write.csv(vertex.test.df,"vertex_test_df.csv")
# Sample size for generated data
n.edge.indiv <- length(alter.test.df$alter)
# Prospective survey questions and answers
# 1. List individuals with whom you have a working relationship
# Output: qualitative categorical free response
# Above code accounts for this question
# 2. How many years have you known this individual?
# Output: continuous integer
q2.years.known.eiq <- sample(c(1:30), n.edge.indiv, replace = T)
# 3. How many years have you worked with this individual?
# Output: continuous integer
# Value cannot exceed years known
q3.years.worked.with.eiq <- round(runif(n.edge.indiv, min = 0, max = q2.years.known.eiq))
# 4. Please describe your working relationship to this individual
# Output: qualitative categorical, include room for "Explanation" if Other
wk.relationship.options <- c("Employer", "Employee", "Colleague", "Other (please specify)")
q4.wk.relationship.eiq <- sample(wk.relationship.options, n.edge.indiv, replace = T)
q4a.wk.relationship.other.eiq <- ifelse(q4.wk.relationship.eiq == "Other (please specify)", "Explanation", "N/A")
# 5. What is this individual's role in the Georgia coastal shrimp industry?
# Output: qualitative categorical, include room for "Explanation" if Other
ind.role.options <- c("Shrimper (captain)", "Shrimper (deck hand)", "Fisherman (professional or recreationa)", "Dock owner", "Dock employee",
"Georgia Department of Natural Resources", "Georgia Sea Grant Marine Extention", "Shrimp buyer", "Retired", "Other")
q5.ind.role.indiv.eiq <- sample(ind.role.options, n.edge.indiv, replace = T)
q5a.ind.role.indiv.other.eiq <- ifelse(q5.ind.role.indiv.eiq == "Other", "Explanation", "N/A")
# 6. Are you related to this individual?
# Output: binary qualitative
q6.related.indiv.eiq <- sample(binary.qual.options, n.edge.indiv, replace = T)
# 6a. If yes, how so?
# Output: free response
related.options <- c("Parent", "Child", "Spouse or partner", "Cousin", "Other (please specify)")
q6a.related.descriptor.eiq <- ifelse(q6.related.indiv.eiq == "Yes", sample(related.options, n.edge.indiv, replace = T), "N/A")
q6b.related.descriptor.other.eiq <- ifelse(q6a.related.descriptor.eiq == "Other (please specify)", "Explain", "N/A")
# 7. Approximately how frequently do you interact with this individual in a professional, work-related context?
# Output: categorical qualitative
interaction.freq.options <- c("Daily", "A few times per week", "Weekly", "Bi-weekly (every other week)", "A few times per month", "Monthly",
"Less than once per month")
q7.work.interaction.freq.eiq <- sample(interaction.freq.options, n.edge.indiv, replace = T)
# 8. Please describe the nature of your work-related interactions with this individual
# Output: free response
# Example answers: "We shrimp together", "I help her unload shrimp at the dock", "I do maintenance on his boat",
# "I hired him to help me shrimp last season"
# 9. Approximately how often do you interact with this individual outside of work (in your personal time)?
# Output: categorical qualitative
q9.personal.interaction.freq.eiq <- sample(interaction.freq.options, n.edge.indiv, replace = T)
# 10. If applicable, please describe the nature of your nonwork-related interactions with this individual
# Output: free response
# Example answers: "We live together", "I live near her (neighbor)", "We play golf together occasionally", "We go to the same church",
# "N/A"
# 11. Do you discuss work-related hardships or problems (e.g., black gill disease, low shrimp harvests, cheap import competitors,
# high price of fuel and boat maintenance, dock or regulatory complaints) with this individual?
# Output: binary qualitative
q11.hardship.discuss.eiq <- sample(binary.qual.options, n.edge.indiv, replace = T)
# 12. I have a healthy, productive, pleasant working relationship with this individual
# Output: qualitative categorical agree options
q12.positive.wk.relationship.eiq <- sample(agree.options, n.edge.indiv, replace = T)
# 13. Please rate the quality of your working relationship with this individual from 0 (extremely unproductive, unenjoyable)
# to 10 (extremely productive, enjoyable).
# Output: numerical likert scale from 0 (bad) to 10 (good)
q13.wk.relationship.quality.eiq <- sample(c(0:10), n.edge.indiv, replace = T)
# 14. This individual contributes to the well-being and sustainability of the Georgia coastal shrimp industry
# Output: qualitative categorical with possible explanation
q14.sust.industry.contribution.eiq <- sample(agree.options, n.edge.indiv, replace = T)
# 15. Please rank your level of trust of this individual in a professional, work-related context from 0 (I do not trust this person)
# to 10 (I trust this person completely).
# Output: numerical likert scale from 0 (bad) to 10 (good)
q15.trust.level.eiq <- sample(c(0:10), n.edge.indiv, replace = T)
# 16. Please rank your willingness to interact with this individual in a professional, work-related context from 0 (I only work with this person because it is absolutely necessary)
# to 10 (I go out of my way to work with this person).
# Output: numerical likert scale from 0 (bad) to 10 (good)
q16.willingness.to.wk.with.eiq <- sample(c(0:10), n.edge.indiv, replace = T)
########## End Edge (individual to individual) sheet questions. Now time to put it all together into one data frame
# tag for edge individual sheet questions = ".eiq"
eiq<-ls(pattern = ".eiq")
edge.indiv.test.df <-as.data.frame(cbind(alter.test.df,as.data.frame(mget(eiq))))
names(edge.indiv.test.df)[1]="ego"
names(edge.indiv.test.df)[2]="alter"
write.csv(edge.indiv.test.df,"edge_indiv_test_df.csv")
vertex_datapath <- "vertex_test_df.csv"
#vertex_datapath <- "vertex_test_df_10_15.csv"
edge_indiv_datapath <- "edge_indiv_test_df.csv"
setwd(input_datapath)
#List packages used
list.of.packages <- c("igraph","randomNames","fabricatr","plyr","RColorBrewer","keyplayer","sna")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)){install.packages(new.packages)}
#Load all packages
lapply(list.of.packages, require, character.only = TRUE)
vertex_test <- read.csv(vertex_datapath, header=T, row.names = 1)
edge_indiv_test <- read.csv(edge_indiv_datapath, header=T, row.names = 1)
str(vertex_test)
str(edge_indiv_test)
# Before we merge these data, we need to make sure 'ego' and 'alter' are the
# same across data sets. We can compare each row using the == syntax.
# The command below should return TRUE for every row if all ego rows
# are the same :
unique(sort(vertex_test$ego)) == unique(sort(edge_indiv_test$ego))
unique(sort(vertex_test$ego)) == unique(sort(edge_org_test$ego))
c(vertex_test$ego)
(vertex_test$ego)
# Before we merge these data, we need to make sure 'ego' and 'alter' are the
# same across data sets. We can compare each row using the == syntax.
# The command below should return TRUE for every row if all ego rows
# are the same :
unique(vertex_test$ego) == unique(c(edge_indiv_test$ego,edge_indiv_test$alter))
c(edge_indiv_test$ego,edge_indiv_test$alter)
vertex_test$ego
edge_indiv_test$ego
edge_indiv_test$alter
c(edge_indiv_test$ego,edge_indiv_test$alter)
# Before we merge these data, we need to make sure 'ego' and 'alter' are the
# same across data sets. We can compare each row using the == syntax.
# The command below should return TRUE for every row if all ego rows
# are the same :
unique(as.character(vertex_test$ego)) == unique(c(as.character(edge_indiv_test$ego),as.character(edge_indiv_test$alter)))
# We can just have R return which row entries are not equal using the syntax below:
which(unique(sort(vertex_test$ego)) != unique(sort(edge_indiv_test$ego)))
#Combine edge and vertex attribute information into igraph format
test.graph <- graph.data.frame(d = edge_indiv_test, vertices = vertex_test)
#test.graph <- graph.data.frame(d = edge_indiv_test)
summary(test.graph)
test.graph
V(test.graph)$profession.df
#Get a list of vertex attribute responses
names(vertex_test)
get.vertex.attribute(test.graph,'profession.df')
#get.vertex.attribute(test.graph,'profession.df')
unique(get.vertex.attribute(test.graph,'profession.df'))
get.vertex.attribute(test.graph,'profession.df')
#get.vertex.attribute(test.graph,'profession.df')
unique(get.vertex.attribute(test.graph,"profession.df"))
class(test.graph)
#get.vertex.attribute(test.graph,'profession.df')
unique(igraph::get.vertex.attribute(test.graph,"profession.df"))
igraph::get.vertex.attribute(test.graph,'profession.df')
# Get an edge list or a matrix:
as_edgelist(test.graph, names=T)
as_adjacency_matrix(test.graph, attr="q3.years.worked.with.eiq")
# Or data frames describing nodes and edges:
as_data_frame(test.graph, what="edges")
as_data_frame(test.graph, what="vertices")
#Simplify graph?
test.graph_simpl <- simplify(test.graph)
test.graph_simpl_symm <- as.undirected(test.graph_simpl, mode='collapse')
#Can convert to undirected
test.graph_symmetrized <- as.undirected(test.graph, mode='collapse')
get.edge.attribute(test.graph,'q2.years.known.eiq')
igraph::get.edge.attribute(test.graph,'q2.years.known.eiq')
igraph::get.edge.attribute(test.graph_symmetrized,'q2.years.known.eiq')
in.degree<-igraph::degree(test.graph,mode="in")
plot(test.graph_simpl,
#edge.color=edge_test$connection,
edge.arrow.size=.1,
#vertex.color=vertex_test$profession.df,
#vertex.size=((in.degree)*1.5),
vertex.size=5,
vertex.label=NA,
vertex.label.cex=0.7,
vertex.label.dist=1,
vertex.label.degree=-0.6,
main='Test Data Connections',
#frame=TRUE,
margin=0.0001)

basedirectory <- "/Users/BryanBozeman/Documents/GitHub/ICON8002_SNA"
vertex_datapath
vertex_datapath <- "vertex_test_df_11_02_18.csv"
vertex_datapath
#Added Write.csv() functionality w/ Keyplayer attributes
date.text<-
substr(vertex_datapath,(length(vertex_datapath)-9),(length(vertex_datapath)-3))
#Added Write.csv() functionality w/ Keyplayer attributes
date.text<-
substr(vertex_datapath,(length(vertex_datapath)-9),(length(vertex_datapath)-3))
#Added Write.csv() functionality w/ Keyplayer attributes
date.text<-
substr(vertex_datapath,(length(vertex_datapath)-9),(length(vertex_datapath)-3))
substr(vertex_datapath,(length(vertex_datapath)-9),(length(vertex_datapath)-3))
length(vertex_datapath)
substr(vertex_datapath,(nchar(vertex_datapath)-9),(nchar(vertex_datapath)-3))
substr(vertex_datapath,(nchar(vertex_datapath)-12),(nchar(vertex_datapath)-4))
substr(vertex_datapath,(nchar(vertex_datapath)-11),(nchar(vertex_datapath)-4))
vertex.df.keyplayer<-paste0("vertex_df_keyplayer_",date.text,".csv")
vertex.df.keyplayer
#Added Write.csv() functionality w/ Keyplayer attributes
date.text<-substr(vertex_datapath,(nchar(vertex_datapath)-11),(nchar(vertex_datapath)-4))
vertex.df.keyplayer<-paste0("vertex_df_keyplayer_",date.text,".csv")
vertex.df.keyplayer
write.csv(Metrics_logistic_df,vertex.df.keyplayer)
############################
#Type in the base directory and input datapaths below
basedirectory <-  "/Users/alecnelson/Documents/GitHub/ICON8002_SNA"
input_datapath <- "/Users/alecnelson/Documents/GitHub/ICON8002_SNA/Data"
vertex_datapath <- "vertex_test_df_11_02_18.csv"
edge_indiv_datapath <- "edge_individual_test_df_11_02_18.csv"
setwd(input_datapath)
#List packages used
list.of.packages <- c("igraph","randomNames","fabricatr","plyr","RColorBrewer","keyplayer","sna","MASS","naturalsort","stringr","Rmisc")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)){install.packages(new.packages)}
#Load all packages
lapply(list.of.packages, require, character.only = TRUE)
vertex_df <- read.csv(vertex_datapath, header=T, row.names = 1)
edge_indiv_df <- read.csv(edge_indiv_datapath, header=T, row.names = 1)
#Combine edge and vertex attribute information into igraph format
graph_complete <- graph.data.frame(d = edge_indiv_df, vertices = vertex_df)
#Symmetrize graph to remove directed edges
graph_complete_symmetrized <- as.undirected(graph_complete, mode='collapse')
# Simplify graph to remove loops and prepare variables
graph_complete_simpl <- simplify(graph_complete)
graph_complete_simpl_symm <- as.undirected(graph_complete_simpl, mode='collapse')
in.degree<-igraph::degree(graph_complete,mode="in")
summary(graph_complete)
########################################################
#Keyplayer functions:
#Convert igraph object into matrix object, which can be read by sna package
matrix_complete<-as.matrix(as_adjacency_matrix(graph_complete))
matrix_inv_non_zero <- matrix_complete
# Inverse the non-zero tie status
matrix_inv_non_zero[matrix_complete != 0] <- 1 / matrix_complete[matrix_complete != 0]
# Symmetrized version of matrix
matrix_complete_symm <- symmetrize(matrix_complete)
#Setting all zero ties to 1
matrix_non_zero_one <- matrix_complete
matrix_non_zero_one[matrix_complete != 0] <- 1
#Determine Keyplayers via different statistical mesurements
## Set size of set group to number of keyplayers wanted per metric
keyplayer_num<-3
####################################
### Example Keyplayers - 11/2/18
closeness_kp_num<-c(54,67,70)
betweenness_kp_num<-c(100,102,110)
degree_kp_num<-c(74,100,102)
closeness_kp_num<-kp_closeness$keyplayers[1:keyplayer_num]
betweenness_kp_num<-kp_betweenness$keyplayers[1:keyplayer_num]
####################################
### Example Keyplayers - 11/2/18
closeness_kp_num<-c(54,67,70)
betweenness_kp_num<-c(100,102,110)
degree_kp_num<-c(74,100,102)
eigenvector_kp_num<-c(1,72,100)
Keyplayer.list<-c(closeness_kp_num,betweenness_kp_num,degree_kp_num,eigenvector_kp_num)
Keyplayer.list<-unique(Keyplayer.list)
closeness_kp_names<-rownames(matrix_complete)[closeness_kp_num]
print(sprintf("The egos identified as keyplayers via the Closeness metric are: %s. This metric suggests a rapid diffusion of information.",paste(closeness_kp_names,collapse="; ")))
betweenness_kp_names<-rownames(matrix_complete)[betweenness_kp_num]
print(sprintf("The egos identified as keyplayers via the Betweenness metric are: %s. This metric suggests a brokering of information or initiatives between disconnected groups.",paste(betweenness_kp_names,collapse="; ")))
degree_kp_names<-rownames(matrix_complete)[degree_kp_num]
print(sprintf("The egos identified as keyplayers via the Degree metric are: %s. This metric suggests a direct connection to complex knowledge and initiatives.",paste(degree_kp_names,collapse="; ")))
eigenvector_kp_names<-rownames(matrix_complete)[eigenvector_kp_num]
print(sprintf("The egos identified as keyplayers via the Eigenvector metric are: %s. This metric suggests a facilitation of widespread diffusion of information to important others.",paste(eigenvector_kp_names,collapse="; ")))
Overlap_vec<-c(closeness_kp_names,betweenness_kp_names,degree_kp_names,eigenvector_kp_names)
Overlap_vec<-unique(Overlap_vec[duplicated(Overlap_vec)])
print(sprintf("The egos identified as keyplayers via multiple Overlapping metrics are: %s. This suggests the role of a keyplayer through multiple functions.",paste(Overlap_vec,collapse="; ")))
Metrics_list<-list(closeness_kp_names,betweenness_kp_names,degree_kp_names,eigenvector_kp_names,Overlap_vec)
Closeness_vec<-c("Closeness",closeness_kp_names)
Betweenness_vec<-c("Betweenness",betweenness_kp_names)
Degree_vec<-c("Degree",degree_kp_names)
Eigenvector_vec<-c("Eigenvector",eigenvector_kp_names)
Keyplayer_df<-as.data.frame(rbind(Closeness_vec,Betweenness_vec,Degree_vec,Eigenvector_vec),row.names = F)
names(Keyplayer_df)<-c("Statistic",LETTERS[1:keyplayer_num])
Keyplayer_names<-igraph::get.vertex.attribute(graph_complete_simpl)$name[Keyplayer.list]
##### Plotting network with key player as identified by above model.
layout.graph <- layout_(graph_complete_simpl, nicely())
layout.graph<-norm_coords(layout.graph, ymin=-1, ymax=1, xmin=-1, xmax=1)
colrs <- c("blue", "green", "red","yellow","purple",adjustcolor("Gray60", alpha=.2))
ego_names<-igraph::get.vertex.attribute(graph_complete_simpl)$name
ego_col<-rep(colrs[length(colrs)],length(ego_names))
for(m in 1:length(Metrics_list)){
colr_set_m<-which(ego_names %in% Metrics_list[[m]])
ego_col[colr_set_m]<-colrs[m]
}
#setwd(basedirectory)
#pdf("SNA_Output_KeyPlayer.pdf")
plot(graph_complete_simpl,
layout=layout.graph,
rescale=T,
edge.color="Gray80",
edge.arrow.size=.01,
vertex.color=ego_col,
#vertex.size=((in.degree)*1.5),
#vertex.size=(igraph::degree(graph_complete)*0.5),
vertex.size=ifelse((igraph::get.vertex.attribute(graph_complete_simpl)$name %in% Keyplayer_names), 8, 4),
vertex.label= ifelse((igraph::get.vertex.attribute(graph_complete_simpl)$name %in% Keyplayer_names), as.character(igraph::get.vertex.attribute(graph_complete_simpl)$name), NA),
vertex.label.color = "blue",
vertex.label=NA,
vertex.label.cex=ifelse(vertex_df$ego == as.character(vertex_df$ego[177]), .5, NA),
vertex.label.dist=0,
vertex.label.degree=0,
main='Network with highlighted Key Players',
#frame=TRUE,
margin=0.0001)
legend(x=-1.5, y = 0, c("Closeness","Betweenness","Degree","Eigenvector","Overlap"), pch=19,
col= c("blue", "green", "red","yellow","purple"), pt.cex=1.5, cex=0.8, bty="n", ncol=1)
#Display information as matrix format
#graph_complete[]
matrix_complete<-as.matrix(as_adjacency_matrix(graph_complete))
data_logistic_df<-vertex_df
Keyplay.bool=ifelse(rownames(data_logistic_df) %in% Keyplayer.list,1,0)
data_logistic_df<-cbind(Keyplay.bool,data_logistic_df)
colnames(data_logistic_df)
Closeness.bool=ifelse((data_logistic_df$ego) %in% Metrics_list[[1]],1,0)
Betweenness.bool=ifelse((data_logistic_df$ego) %in% Metrics_list[[2]],1,0)
Degree.bool=ifelse((data_logistic_df$ego) %in% Metrics_list[[3]],1,0)
Eigenvector.bool=ifelse((data_logistic_df$ego) %in% Metrics_list[[4]],1,0)
Overlap.bool=ifelse((data_logistic_df$ego) %in% Metrics_list[[5]],1,0)
Metrics_logistic_df<-cbind(Closeness.bool,Betweenness.bool,Degree.bool,Eigenvector.bool,Overlap.bool,data_logistic_df)
colnames(Metrics_logistic_df)
#Added Write.csv() functionality w/ Keyplayer attributes
date.text<-substr(vertex_datapath,(nchar(vertex_datapath)-11),(nchar(vertex_datapath)-4))
vertex.df.keyplayer<-paste0("vertex_df_keyplayer_",date.text,".csv")
write.csv(Metrics_logistic_df,vertex.df.keyplayer)

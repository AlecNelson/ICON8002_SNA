# function, then it is called, with the graph and any other extra arguments.
# 2. Otherwise, if the graph has vertex attributes called ‘x’ and ‘y’, then these are used as coordinates
# If the graph has an additional ‘z’ vertex attribute, that is also used.
# 3. Otherwise, if the graph is connected and has less than 1000 vertices, the Fruchterman-Reingold
# layout is used, by calling layout_with_fr.
# 4. Otherwise the DrL layout (Distributed Recursive (Graph) Layout) is used, layout_with_drl is called.
layout.graph <- layout_(test.graph, nicely())
plot(test.graph_symmetrized,
layout=layout.graph,
#edge.color=edge_test$connection,
edge.arrow.size=.5,
vertex.color=vertex_test$profession,
#vertex.size=((in.degree)*1.5),
vertex.size=3,
vertex.label=NA,
vertex.label.cex=0.7,
vertex.label.dist=1,
vertex.label.degree=-0.6,
main='Test Data Connections (color by profession)',
#frame=TRUE,
margin=0.0001)
plot(test.graph_symmetrized,
#edge.color=edge_test$connection,
edge.arrow.size=.5,
vertex.color=colrs[V(test.graph_symmetrized)$community],
vertex.size=((in.degree)*1.5),
vertex.label=vertex_test$profession.df,
vertex.label.cex=0.7,
vertex.label.dist=1,
vertex.label.degree=-0.6,
main='Test Data Connections (color by profession/community)',
#frame=TRUE,
margin=0.0001)
#layout_nicely tries to choose an appropriate layout function for the supplied graph, and uses that
# to generate the layout. The current implementation works like this:
#   1. If the graph has a graph attribute called ‘layout’, then this is used. If this attribute is an R
# function, then it is called, with the graph and any other extra arguments.
# 2. Otherwise, if the graph has vertex attributes called ‘x’ and ‘y’, then these are used as coordinates
# If the graph has an additional ‘z’ vertex attribute, that is also used.
# 3. Otherwise, if the graph is connected and has less than 1000 vertices, the Fruchterman-Reingold
# layout is used, by calling layout_with_fr.
# 4. Otherwise the DrL layout (Distributed Recursive (Graph) Layout) is used, layout_with_drl is called.
layout.graph <- layout_(test.graph, nicely())
plot(test.graph_symmetrized,
layout=layout.graph,
#edge.color=edge_test$connection,
edge.arrow.size=.5,
vertex.color=vertex_test$profession,
#vertex.size=((in.degree)*1.5),
vertex.size=3,
vertex.label=vertex_test$profession.df,
vertex.label.cex=0.7,
vertex.label.dist=1,
vertex.label.degree=-0.6,
main='Test Data Connections (color by profession)',
#frame=TRUE,
margin=0.0001)
# Or data frames describing nodes and edges:
as_data_frame(test.graph, what="edges")
as_data_frame(test.graph, what="vertices")
# Get an edge list or a matrix:
as_edgelist(test.graph, names=T)
as_adjacency_matrix(test.graph, attr="profession.df")
# Or data frames describing nodes and edges:
as_data_frame(test.graph, what="edges")
colnames(edge_test)
colnames(edge_indiv_test)
as_adjacency_matrix(test.graph, attr="q3.years.worked.with.eiq")
#Display information as matrix format
test.graph[]
#Display information as matrix format
test.graph[]
plot(test.graph_symmetrized,
layout=1,
#edge.color=edge_test$connection,
edge.arrow.size=.5,
vertex.color=vertex_test$profession,
#vertex.size=((in.degree)*1.5),
vertex.size=3,
#vertex.label=vertex_test$profession.df,
vertex.label=NA,
vertex.label.cex=0.7,
vertex.label.dist=1,
vertex.label.degree=-0.6,
main='Test Data Connections (color by profession)',
#frame=TRUE,
margin=0.0001)
#layout_nicely tries to choose an appropriate layout function for the supplied graph, and uses that
# to generate the layout. The current implementation works like this:
#   1. If the graph has a graph attribute called ‘layout’, then this is used. If this attribute is an R
# function, then it is called, with the graph and any other extra arguments.
# 2. Otherwise, if the graph has vertex attributes called ‘x’ and ‘y’, then these are used as coordinates
# If the graph has an additional ‘z’ vertex attribute, that is also used.
# 3. Otherwise, if the graph is connected and has less than 1000 vertices, the Fruchterman-Reingold
# layout is used, by calling layout_with_fr.
# 4. Otherwise the DrL layout (Distributed Recursive (Graph) Layout) is used, layout_with_drl is called.
layout.graph <- layout_(test.graph, nicely())
plot(test.graph_symmetrized,
layout=layout.graph,
#edge.color=edge_test$connection,
edge.arrow.size=.5,
vertex.color=vertex_test$profession,
#vertex.size=((in.degree)*1.5),
vertex.size=3,
#vertex.label=vertex_test$profession.df,
vertex.label=NA,
vertex.label.cex=0.7,
vertex.label.dist=1,
vertex.label.degree=-0.6,
main='Test Data Connections (color by profession)',
#frame=TRUE,
margin=0.0001)
plot(test.graph_symmetrized,
layout=layout.graph,
#edge.color=edge_test$connection,
edge.arrow.size=.5,
vertex.color=vertex_test$profession,
#vertex.size=((in.degree)*1.5),
vertex.size=3,
#vertex.label=vertex_test$profession.df,
vertex.label=NA,
vertex.label.cex=0.7,
vertex.label.dist=1,
vertex.label.degree=-0.6,
main='Test Data Connections (color by profession)',
#frame=TRUE,
margin=0.0001)
dev.off()
plot(test.graph_symmetrized,
layout=layout.graph,
#edge.color=edge_test$connection,
edge.arrow.size=.5,
vertex.color=vertex_test$profession,
#vertex.size=((in.degree)*1.5),
vertex.size=3,
#vertex.label=vertex_test$profession.df,
vertex.label=NA,
vertex.label.cex=0.7,
vertex.label.dist=1,
vertex.label.degree=-0.6,
main='Test Data Connections (color by profession)',
#frame=TRUE,
margin=0.0001)
plot(test.graph_symmetrized,
layout=(layout.graph*1),
rescale=F,
#edge.color=edge_test$connection,
edge.arrow.size=.5,
vertex.color=vertex_test$profession,
#vertex.size=((in.degree)*1.5),
vertex.size=3,
#vertex.label=vertex_test$profession.df,
vertex.label=NA,
vertex.label.cex=0.7,
vertex.label.dist=1,
vertex.label.degree=-0.6,
main='Test Data Connections (color by profession)',
#frame=TRUE,
margin=0.0001)
plot(test.graph_symmetrized,
layout=(layout.graph*0.6),
rescale=F,
#edge.color=edge_test$connection,
edge.arrow.size=.5,
vertex.color=vertex_test$profession,
#vertex.size=((in.degree)*1.5),
vertex.size=3,
#vertex.label=vertex_test$profession.df,
vertex.label=NA,
vertex.label.cex=0.7,
vertex.label.dist=1,
vertex.label.degree=-0.6,
main='Test Data Connections (color by profession)',
#frame=TRUE,
margin=0.0001)
plot(test.graph_symmetrized,
layout=(layout.graph*0.4),
rescale=F,
#edge.color=edge_test$connection,
edge.arrow.size=.5,
vertex.color=vertex_test$profession,
#vertex.size=((in.degree)*1.5),
vertex.size=3,
#vertex.label=vertex_test$profession.df,
vertex.label=NA,
vertex.label.cex=0.7,
vertex.label.dist=1,
vertex.label.degree=-0.6,
main='Test Data Connections (color by profession)',
#frame=TRUE,
margin=0.0001)
plot(test.graph_symmetrized,
layout=(layout.graph*0.2),
rescale=F,
#edge.color=edge_test$connection,
edge.arrow.size=.5,
vertex.color=vertex_test$profession,
#vertex.size=((in.degree)*1.5),
vertex.size=3,
#vertex.label=vertex_test$profession.df,
vertex.label=NA,
vertex.label.cex=0.7,
vertex.label.dist=1,
vertex.label.degree=-0.6,
main='Test Data Connections (color by profession)',
#frame=TRUE,
margin=0.0001)
layout.graph<-norm_coords(layout.graph, ymin=-1, ymax=1, xmin=-1, xmax=1)
plot(test.graph_symmetrized,
layout=(layout.graph*0.2),
rescale=F,
#edge.color=edge_test$connection,
edge.arrow.size=.5,
vertex.color=vertex_test$profession,
#vertex.size=((in.degree)*1.5),
vertex.size=3,
#vertex.label=vertex_test$profession.df,
vertex.label=NA,
vertex.label.cex=0.7,
vertex.label.dist=1,
vertex.label.degree=-0.6,
main='Test Data Connections (color by profession)',
#frame=TRUE,
margin=0.0001)
plot(test.graph_symmetrized,
layout=(layout.graph*0.8),
rescale=F,
#edge.color=edge_test$connection,
edge.arrow.size=.5,
vertex.color=vertex_test$profession,
#vertex.size=((in.degree)*1.5),
vertex.size=3,
#vertex.label=vertex_test$profession.df,
vertex.label=NA,
vertex.label.cex=0.7,
vertex.label.dist=1,
vertex.label.degree=-0.6,
main='Test Data Connections (color by profession)',
#frame=TRUE,
margin=0.0001)
plot(test.graph_symmetrized,
layout=(layout.graph*1.2),
rescale=F,
#edge.color=edge_test$connection,
edge.arrow.size=.5,
vertex.color=vertex_test$profession,
#vertex.size=((in.degree)*1.5),
vertex.size=3,
#vertex.label=vertex_test$profession.df,
vertex.label=NA,
vertex.label.cex=0.7,
vertex.label.dist=1,
vertex.label.degree=-0.6,
main='Test Data Connections (color by profession)',
#frame=TRUE,
margin=0.0001)
plot(test.graph_symmetrized,
layout=(layout.graph*1.1),
rescale=F,
#edge.color=edge_test$connection,
edge.arrow.size=.5,
vertex.color=vertex_test$profession,
#vertex.size=((in.degree)*1.5),
vertex.size=3,
#vertex.label=vertex_test$profession.df,
vertex.label=NA,
vertex.label.cex=0.7,
vertex.label.dist=1,
vertex.label.degree=-0.6,
main='Test Data Connections (color by profession)',
#frame=TRUE,
margin=0.0001)
plot(test.graph_symmetrized,
layout=(layout.graph*1.1),
#rescale=F,
#edge.color=edge_test$connection,
edge.arrow.size=.5,
vertex.color=vertex_test$profession,
#vertex.size=((in.degree)*1.5),
vertex.size=3,
#vertex.label=vertex_test$profession.df,
vertex.label=NA,
vertex.label.cex=0.7,
vertex.label.dist=1,
vertex.label.degree=-0.6,
main='Test Data Connections (color by profession)',
#frame=TRUE,
margin=0.0001)
hist(edge_indiv_test$weight)
mean(edge_indiv_test$weight)
sd(edge_indiv_test$weight)
hist(edge_indiv_test$q3.years.worked.with.eiq)
mean(edge_indiv_test$q3.years.worked.with.eiq)
sd(edge_indiv_test$q3.years.worked.with.eiq)
cut.off <- mean(edge_indiv_test$q3.years.worked.with.eiq)
test.graph <- delete_edges(test.graph, E(test.graph)[q3.years.worked.with.eiq<cut.off])
layout.graph <- layout_(test.graph, nicely())
layout.graph<-norm_coords(layout.graph, ymin=-1, ymax=1, xmin=-1, xmax=1)
plot(test.graph_symmetrized,
layout=(layout.graph*1.1),
rescale=F,
#edge.color=edge_test$connection,
edge.arrow.size=.5,
vertex.color=vertex_test$profession,
#vertex.size=((in.degree)*1.5),
vertex.size=3,
#vertex.label=vertex_test$profession.df,
vertex.label=NA,
vertex.label.cex=0.7,
vertex.label.dist=1,
vertex.label.degree=-0.6,
main='Test Data Connections (color by profession)',
#frame=TRUE,
margin=0.0001)
plot(test.graph_symmetrized,
layout=(layout.graph*1.1),
rescale=F,
#edge.color=edge_test$connection,
edge.arrow.size=.5,
vertex.color=vertex_test$profession,
#vertex.size=((in.degree)*1.5),
vertex.size=3,
#vertex.label=vertex_test$profession.df,
vertex.label=NA,
vertex.label.cex=0.7,
vertex.label.dist=1,
vertex.label.degree=-0.6,
main='Network of strong worked-together-year connection',
#frame=TRUE,
margin=0.0001)
#Combine edge and vertex attribute information into igraph format
test.graph <- graph.data.frame(d = edge_indiv_test, vertices = vertex_test)
cut.off <- mean(edge_indiv_test$q3.years.worked.with.eiq)
test.graph.years <- delete_edges(test.graph, E(test.graph)[q3.years.worked.with.eiq<cut.off])
layout.graph <- layout_(test.graph.years, nicely())
layout.graph<-norm_coords(layout.graph, ymin=-1, ymax=1, xmin=-1, xmax=1)
plot(test.graph.years,
layout=(layout.graph*1.1),
rescale=F,
#edge.color=edge_test$connection,
edge.arrow.size=.5,
vertex.color=vertex_test$profession,
#vertex.size=((in.degree)*1.5),
vertex.size=3,
#vertex.label=vertex_test$profession.df,
vertex.label=NA,
vertex.label.cex=0.7,
vertex.label.dist=1,
vertex.label.degree=-0.6,
main='Network of strong worked-together-year connection',
#frame=TRUE,
margin=0.0001)
plot(test.graph.years,
layout=(layout.graph*1.1),
rescale=F,
#edge.color=edge_test$connection,
edge.arrow.size=.01,
vertex.color=vertex_test$profession,
#vertex.size=((in.degree)*1.5),
vertex.size=3,
#vertex.label=vertex_test$profession.df,
vertex.label=NA,
vertex.label.cex=0.7,
vertex.label.dist=1,
vertex.label.degree=-0.6,
main='Network of strong worked-together-year connection',
#frame=TRUE,
margin=0.0001)
cut.off
plot(test.graph.years,
layout=(layout.graph*1.1),
rescale=F,
#edge.color=edge_test$connection,
edge.arrow.size=.01,
vertex.color=vertex_test$profession,
#vertex.size=((in.degree)*1.5),
vertex.size=3,
#vertex.label=vertex_test$profession.df,
vertex.label=NA,
vertex.label.cex=0.7,
vertex.label.dist=1,
vertex.label.degree=-0.6,
main=paste0('Network of worked-together-with ',cut.off,' years connection'),
#frame=TRUE,
margin=0.0001)
cut.off <- round(mean(edge_indiv_test$q3.years.worked.with.eiq))
cut.off
cut.off <- round(mean(edge_indiv_test$q3.years.worked.with.eiq))
test.graph.years <- delete_edges(test.graph, E(test.graph)[q3.years.worked.with.eiq<cut.off])
layout.graph <- layout_(test.graph.years, nicely())
layout.graph<-norm_coords(layout.graph, ymin=-1, ymax=1, xmin=-1, xmax=1)
plot(test.graph.years,
layout=(layout.graph*1.1),
rescale=F,
#edge.color=edge_test$connection,
edge.arrow.size=.01,
vertex.color=vertex_test$profession,
#vertex.size=((in.degree)*1.5),
vertex.size=3,
#vertex.label=vertex_test$profession.df,
vertex.label=NA,
vertex.label.cex=0.7,
vertex.label.dist=1,
vertex.label.degree=-0.6,
main=paste0('Network of worked-together-with ',cut.off,' years connection'),
#frame=TRUE,
margin=0.0001)
plot(test.graph.years,
layout=(layout.graph*1.1),
rescale=F,
#edge.color=edge_test$connection,
edge.arrow.size=.01,
vertex.color=vertex_test$profession,
vertex.size=((in.degree)*1.5),
#vertex.size=3,
#vertex.label=vertex_test$profession.df,
vertex.label=NA,
vertex.label.cex=0.7,
vertex.label.dist=1,
vertex.label.degree=-0.6,
main=paste0('Network of worked-together-with ',cut.off,' years connection'),
#frame=TRUE,
margin=0.0001)
plot(test.graph.years,
layout=(layout.graph*1.1),
rescale=F,
#edge.color=edge_test$connection,
edge.arrow.size=.01,
vertex.color=vertex_test$profession,
vertex.size=((in.degree)*1.1),
#vertex.size=3,
#vertex.label=vertex_test$profession.df,
vertex.label=NA,
vertex.label.cex=0.7,
vertex.label.dist=1,
vertex.label.degree=-0.6,
main=paste0('Network of worked-together-with ',cut.off,' years connection'),
#frame=TRUE,
margin=0.0001)
plot(test.graph.years,
layout=(layout.graph*1.1),
rescale=F,
#edge.color=edge_test$connection,
edge.arrow.size=.01,
vertex.color=vertex_test$profession,
vertex.size=((in.degree)*0.9),
#vertex.size=3,
#vertex.label=vertex_test$profession.df,
vertex.label=NA,
vertex.label.cex=0.7,
vertex.label.dist=1,
vertex.label.degree=-0.6,
main=paste0('Network of worked-together-with ',cut.off,' years connection'),
#frame=TRUE,
margin=0.0001)
plot(test.graph.years,
layout=(layout.graph*1.1),
rescale=F,
#edge.color=edge_test$connection,
edge.arrow.size=.01,
vertex.color=vertex_test$profession,
vertex.size=((in.degree)*0.9),
#vertex.size=3,
vertex.label=vertex_test$profession.df,
#vertex.label=NA,
vertex.label.cex=0.1,
vertex.label.dist=1,
vertex.label.degree=-0.6,
main=paste0('Network of worked-together-with ',cut.off,' years connection'),
#frame=TRUE,
margin=0.0001)
plot(test.graph.years,
layout=(layout.graph*1.1),
rescale=F,
#edge.color=edge_test$connection,
edge.arrow.size=.01,
vertex.color=vertex_test$profession,
vertex.size=((in.degree)*0.9),
#vertex.size=3,
vertex.label=vertex_test$profession.df,
#vertex.label=NA,
vertex.label.cex=0.6,
vertex.label.dist=1,
vertex.label.degree=-0.6,
main=paste0('Network of worked-together-with ',cut.off,' years connection'),
#frame=TRUE,
margin=0.0001)
plot(test.graph.years,
layout=(layout.graph*1.1),
rescale=F,
#edge.color=edge_test$connection,
edge.arrow.size=.01,
vertex.color=vertex_test$profession,
vertex.size=((in.degree)*0.9),
#vertex.size=3,
#vertex.label=vertex_test$profession.df,
vertex.label=NA,
vertex.label.cex=0.6,
vertex.label.dist=1,
vertex.label.degree=-0.6,
main=paste0('Network of worked-together-with ',cut.off,' years connection'),
#frame=TRUE,
margin=0.0001)
# Community detection (by optimizing modularity over partitions):
clp <- cluster_optimal(test.graph)
cluster_optial()
cluster_optimal()
cluster_optimal(test.graph)
?cluster_optimal()
cluster_optimal()
cluster_optimal
cluster_optimal(test.graph,vertex_test$profession.df)

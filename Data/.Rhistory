q <- matrix(c(0, .2, .6, 0, 0, .1, 0, 0, .4, 0, .1, .1, 0, .4, 0, 0, .5, 0, 0, .3,
+ 0, .4, 0, 0, 0), nrow = 5, ncol = 5, byrow = TRUE)
P <- q * g
diffusion(P, T = 5)
contract(W, c(2, 3), method = "max")
contract(P, c(2, 3), method = "union")
kpcent(W, c(2, 3), type = "degree", cmode = "total", method = "max")
kpcent(W, c(2, 3), type = "degree", cmode = "total", method = "max")
kpcent(W, c(2, 3), type = "degree", cmode = "total", method = "min")
kpcent(W, c(2, 3), type = "degree", cmode = "total", method = "min", binary = TRUE)
kpcent(W, c(2, 3), type = "mreach.degree", cmode = "total", M = 1, binary = TRUE)
kpcent(W, c(2, 3), type = "mreach.closeness", cmode = "total", M = 1, binary = TRUE)
kpset(W, size = 2, type = "degree", cmode = "indegree", method = "max")
kpset(W, size = 2, type = "degree", cmode = "indegree", binary = TRUE,
+ method = "max")
kpset(W, size = 2, type = "degree", cmode = "indegree", binary = TRUE, method = "max")
kpset(W, size = 2, type = "mreach.degree", cmode = "indegree", M = 1,binary = TRUE)
kpset(A, size = 2, type = "mreach.closeness", cmode = "indegree", M = 1)
$keyplayers
kpset(W, size = 2, type = "degree", cmode = "indegree", parallel = TRUE,cluster = 2)
kpcent(W, c(2, 3), type = "degree", cmode = "total", method = "max")
kpcent(W, c(2, 3), type = "degree", cmode = "total", method = "min")
kpcent(W, c(2, 3), type = "degree", cmode = "total", method = "min", binary = TRUE)
kpcent(W, c(2, 3), type = "mreach.degree", cmode = "total", M = 1, binary = TRUE)
kpcent(W, c(2, 3), type = "mreach.closeness", cmode = "total", M = 1, binary = TRUE)
kpset(W, size = 2, type = "degree", cmode = "indegree", method = "max")
kpset(W, size = 2, type = "degree", cmode = "indegree", binary = TRUE, method = "max")
kpset(W, size = 2, type = "mreach.degree", cmode = "indegree", M = 1,binary = TRUE)
kpset(A, size = 2, type = "mreach.closeness", cmode = "indegree", M = 1)
kpset(W, size = 2, type = "degree", cmode = "indegree", method = "max")
kpset(W, size = 1, type = "degree", cmode = "indegree", method = "max")
kpset(W, size = 2, type = "degree", cmode = "outdegree", binary = TRUE, method = "max")
test.graph[]
as_adjacency_matrix(test.graph)
class(W)
class(as_adjacency_matrix(test.graph))
as.matrix(as_adjacency_matrix(test.graph))
test.matrix<-as.matrix(as_adjacency_matrix(test.graph))
test.matrix<-as.matrix(as_adjacency_matrix(test.graph))
W<-test.matrix
A <- W
A[W != 0] <- 1 / W[W != 0] # Inverse the non-zero tie status
evcent(A, gmode = "digraph", ignore.eval = FALSE, use.eigen = TRUE)
B <- symmetrize(W)
evcent(B)
mreach.degree(W, M = 1)
mreach.closeness(A)
fragment(A)
g <- W
g[W != 0] <- 1
q <- matrix(c(0, .2, .6, 0, 0, .1, 0, 0, .4, 0, .1, .1, 0, .4, 0, 0, .5, 0, 0, .3,
+ 0, .4, 0, 0, 0), nrow = 5, ncol = 5, byrow = TRUE)
P <- q * g
diffusion(P, T = 5)
contract(W, c(2, 3), method = "max")
kpcent(W, c(2, 3), type = "degree", cmode = "total", method = "max")
kpcent(W, c(2, 3), type = "degree", cmode = "total", method = "min")
kpcent(W, c(2, 3), type = "degree", cmode = "total", method = "min", binary = TRUE)
kpcent(W, c(2, 3), type = "mreach.degree", cmode = "total", M = 1, binary = TRUE)
kpcent(W, c(2, 3), type = "mreach.closeness", cmode = "total", M = 1, binary = TRUE)
kpset(W, size = 2, type = "degree", cmode = "indegree", method = "max")
W$2
W[2]
W[,2]
W[2,]
W
names(W)
colnames(W)
colnames(W)[2]
rownames(W)[2]
evcent(A, gmode = "digraph", ignore.eval = FALSE, use.eigen = TRUE)
evcent(B)
mreach.degree(W, M = 1)
mreach.closeness(A)
max(mreach.closeness(A))
which.max(mreach.degree(W, M = 1))
which.max(mreach.closeness(A))
rownames(W)[which.max(mreach.degree(W, M = 1))]
reach.degree(W, M = 1)
which.max(mreach.degree(W, M = 1))
mreach.degree(W, M = 1)
max(mreach.degree(W, M = 1))
mreach.degree(W, M = 1)$total
mreach.degree(W, M = 1)[,3]
which.max(mreach.degree(W, M = 1)[,3])
which.max(mreach.degree(W, M = 1)[,3])[1]
which.max(mreach.degree(W, M = 1)[,3])[1,]
which.max(mreach.degree(W, M = 1)[,3])[[1]]
which.max(mreach.degree(W, M = 1)[,3])[[2]]
which.max(mreach.degree(W, M = 1)[,3])[1]
which.max(mreach.closeness(A)[,3])[1]
kpset(W, size = 2, type = "degree", cmode = "indegree", method = "max")
kpset(W, size = 2, type = "degree", cmode = "indegree", binary = TRUE, method = "max")
kpset(W, size = 2, type = "mreach.degree", cmode = "indegree", M = 1,binary = TRUE)
kpset(A, size = 2, type = "mreach.closeness", cmode = "indegree", M = 1)
kpset(W, size = 2, type = "degree", cmode = "indegree", parallel = TRUE,cluster = 2)
rownames(W)[63]
plot(test.graph_symmetrized,
layout=(layout.graph*1.1),
rescale=F,
#edge.color=edge_test$connection,
edge.arrow.size=.5,
vertex.color=vertex_test$ego,
#vertex.size=((in.degree)*1.5),
vertex.size=3,
#vertex.label=vertex_test$profession.df,
vertex.label=NA,
vertex.label.cex=0.7,
vertex.label.dist=1,
vertex.label.degree=-0.6,
main='Test Data Connections (color by profession)',
#frame=TRUE,
margin=0.0001)
layout.graph <- layout_(test.graph_symmetrized, nicely())
layout.graph<-norm_coords(layout.graph, ymin=-1, ymax=1, xmin=-1, xmax=1)
plot(test.graph_symmetrized,
layout=(layout.graph*1.1),
rescale=F,
#edge.color=edge_test$connection,
edge.arrow.size=.5,
vertex.color=vertex_test$ego,
#vertex.size=((in.degree)*1.5),
vertex.size=3,
#vertex.label=vertex_test$profession.df,
vertex.label=NA,
vertex.label.cex=0.7,
vertex.label.dist=1,
vertex.label.degree=-0.6,
main='Test Data Connections (color by profession)',
#frame=TRUE,
margin=0.0001)
rownames(W)[2]
rownames(W)[63]
plot(test.graph_symmetrized,
layout=(layout.graph*1.1),
rescale=F,
#edge.color=edge_test$connection,
edge.arrow.size=.5,
vertex.color=vertex_test$profession.df,
#vertex.size=((in.degree)*1.5),
vertex.size=3,
vertex.label=vertex_test$ego,
#vertex.label=NA,
vertex.label.cex=0.7,
vertex.label.dist=1,
vertex.label.degree=-0.6,
main='Test Data Connections (color by profession)',
#frame=TRUE,
margin=0.0001)
plot(test.graph_symmetrized,
layout=(layout.graph*1.1),
rescale=F,
#edge.color=edge_test$connection,
edge.arrow.size=.5,
vertex.color=vertex_test$profession.df,
#vertex.size=((in.degree)*1.5),
vertex.size=3,
vertex.label=vertex.label = ifelse(degree(g) > 2, V(g)$label, NA),
#vertex.label=NA,
vertex.label.cex=0.7,
vertex.label.dist=1,
vertex.label.degree=-0.6,
main='Test Data Connections (color by profession)',
#frame=TRUE,
margin=0.0001)
plot(test.graph_symmetrized,
layout=(layout.graph*1.1),
rescale=F,
#edge.color=edge_test$connection,
edge.arrow.size=.5,
vertex.color=vertex_test$profession.df,
#vertex.size=((in.degree)*1.5),
vertex.size=3,
vertex.label= ifelse(degree(g) > 2, V(g)$label, NA),
#vertex.label=NA,
vertex.label.cex=0.7,
vertex.label.dist=1,
vertex.label.degree=-0.6,
main='Test Data Connections (color by profession)',
#frame=TRUE,
margin=0.0001)
plot(test.graph_symmetrized,
layout=(layout.graph*1.1),
rescale=F,
#edge.color=edge_test$connection,
edge.arrow.size=.5,
vertex.color=vertex_test$profession.df,
#vertex.size=((in.degree)*1.5),
vertex.size=3,
vertex.label= ifelse(degree(test.graph_symmetrized) > 2, V(test.graph_symmetrized)$label, NA),
#vertex.label=NA,
vertex.label.cex=0.7,
vertex.label.dist=1,
vertex.label.degree=-0.6,
main='Test Data Connections (color by profession)',
#frame=TRUE,
margin=0.0001)
plot(test.graph_symmetrized,
layout=(layout.graph*1.1),
rescale=F,
#edge.color=edge_test$connection,
edge.arrow.size=.5,
vertex.color=vertex_test$profession.df,
#vertex.size=((in.degree)*1.5),
vertex.size=3,
vertex.label= ifelse(degree(W) > 2, V(W)$label, NA),
#vertex.label=NA,
vertex.label.cex=0.7,
vertex.label.dist=1,
vertex.label.degree=-0.6,
main='Test Data Connections (color by profession)',
#frame=TRUE,
margin=0.0001)
plot(test.graph_symmetrized,
layout=(layout.graph*1.1),
rescale=F,
#edge.color=edge_test$connection,
edge.arrow.size=.5,
vertex.color=vertex_test$profession.df,
#vertex.size=((in.degree)*1.5),
vertex.size=3,
vertex.label= ifelse(degree(test.graph) > 2, V(test.graph)$label, NA),
#vertex.label=NA,
vertex.label.cex=0.7,
vertex.label.dist=1,
vertex.label.degree=-0.6,
main='Test Data Connections (color by profession)',
#frame=TRUE,
margin=0.0001)
V(test.graph)$label
vertex_test$label
vertex_test$ego
plot(test.graph_symmetrized,
layout=(layout.graph*1.1),
rescale=F,
#edge.color=edge_test$connection,
edge.arrow.size=.5,
vertex.color=vertex_test$profession.df,
#vertex.size=((in.degree)*1.5),
vertex.size=3,
vertex.label= ifelse(vertex_test$ego == 2, vertex_test$ego, NA),
#vertex.label=NA,
vertex.label.cex=0.7,
vertex.label.dist=1,
vertex.label.degree=-0.6,
main='Test Data Connections (color by profession)',
#frame=TRUE,
margin=0.0001)
rownumber(vertex_test$ego)
vertex_test$ego[2]
plot(test.graph_symmetrized,
layout=(layout.graph*1.1),
rescale=F,
#edge.color=edge_test$connection,
edge.arrow.size=.5,
vertex.color=vertex_test$profession.df,
#vertex.size=((in.degree)*1.5),
vertex.size=3,
vertex.label= ifelse(vertex_test$ego == vertex_test$ego[2], vertex_test$ego, NA),
#vertex.label=NA,
vertex.label.cex=0.7,
vertex.label.dist=1,
vertex.label.degree=-0.6,
main='Test Data Connections (color by profession)',
#frame=TRUE,
margin=0.0001)
vertex_test$ego[2]
as.character(vertex_test$ego[2])
plot(test.graph_symmetrized,
layout=(layout.graph*1.1),
rescale=F,
#edge.color=edge_test$connection,
edge.arrow.size=.5,
vertex.color=vertex_test$profession.df,
#vertex.size=((in.degree)*1.5),
vertex.size=3,
vertex.label= ifelse(vertex_test$ego == as.character(vertex_test$ego[2]), vertex_test$ego, NA),
#vertex.label=NA,
vertex.label.cex=0.7,
vertex.label.dist=1,
vertex.label.degree=-0.6,
main='Test Data Connections (color by profession)',
#frame=TRUE,
margin=0.0001)
plot(test.graph_symmetrized,
layout=(layout.graph*1.1),
rescale=F,
#edge.color=edge_test$connection,
edge.arrow.size=.5,
vertex.color=vertex_test$profession.df,
#vertex.size=((in.degree)*1.5),
vertex.size=3,
vertex.label= ifelse(vertex_test$ego == as.character(vertex_test$ego[2]), as.character(vertex_test$ego), NA),
#vertex.label=NA,
vertex.label.cex=0.7,
vertex.label.dist=1,
vertex.label.degree=-0.6,
main='Test Data Connections (color by profession)',
#frame=TRUE,
margin=0.0001)
plot(test.graph_symmetrized,
layout=(layout.graph*1.1),
rescale=F,
#edge.color=edge_test$connection,
edge.arrow.size=.5,
vertex.color=vertex_test$profession.df,
#vertex.size=((in.degree)*1.5),
vertex.size=3,
vertex.label= ifelse(vertex_test$ego == as.character(vertex_test$ego[2]), as.character(vertex_test$ego), NA),
#vertex.label=NA,
vertex.label.cex=1.7,
vertex.label.dist=1,
vertex.label.degree=-0.6,
main='Test Data Connections (color by profession)',
#frame=TRUE,
margin=0.0001)
plot(test.graph_symmetrized,
layout=(layout.graph*1.1),
rescale=F,
#edge.color=edge_test$connection,
edge.arrow.size=.5,
vertex.color=vertex_test$profession.df,
#vertex.size=((in.degree)*1.5),
vertex.size=3,
vertex.label= ifelse(vertex_test$ego == as.character(vertex_test$ego[2]), as.character(vertex_test$ego), NA),
#vertex.label=NA,
vertex.label.cex=1.0,
vertex.label.dist=0,
vertex.label.degree=0,
main='Test Data Connections (color by profession)',
#frame=TRUE,
margin=0.0001)
vertex.label= ifelse(vertex_test$ego == as.character(vertex_test$ego[2] | as.character(vertex_test$ego[63]), as.character(vertex_test$ego), NA),
plot(test.graph_symmetrized,
layout=(layout.graph*1.1),
rescale=F,
#edge.color=edge_test$connection,
edge.arrow.size=.5,
vertex.color=vertex_test$profession.df,
#vertex.size=((in.degree)*1.5),
vertex.size=3,
vertex.label= ifelse(vertex_test$ego == as.character(vertex_test$ego[2] | as.character(vertex_test$ego[63])), as.character(vertex_test$ego), NA),
#vertex.label=NA,
vertex.label.cex=1.0,
vertex.label.dist=0,
vertex.label.degree=0,
main='Test Data Connections (color by profession)',
#frame=TRUE,
margin=0.0001)
rownames(W)[2,63]
plot(test.graph_symmetrized,
layout=(layout.graph*1.1),
rescale=F,
#edge.color=edge_test$connection,
edge.arrow.size=.5,
vertex.color=vertex_test$profession.df,
#vertex.size=((in.degree)*1.5),
vertex.size=3,
vertex.label= ifelse(vertex_test$ego == as.character(vertex_test$ego[2]), as.character(vertex_test$ego), NA),
#vertex.label=NA,
vertex.label.cex=1.0,
vertex.label.dist=0,
vertex.label.degree=0,
main='Test Data Connections (color by profession)',
#frame=TRUE,
margin=0.0001)
kpset(W, size = 1, type = "degree", cmode = "all", method = "max")
kpset(W, size = 1, type = "degree", cmode = "all", binary = TRUE, method = "max")
kpset(W, size = 1, type = "mreach.degree", cmode = "all", M = 1,binary = TRUE)
kpset(A, size = 1, type = "mreach.closeness", cmode = "all", M = 1)
kpset(W, size = 1, type = "degree", cmode = "all", parallel = TRUE,cluster = 2)
kpset(W, size = 2, type = "degree", cmode = "all", method = "max")
warnings()
kpset(W, size = 2, type = "degree", cmode = "total", method = "max")
kpset(W, size = 1, type = "degree", cmode = "total", method = "max")
kpset(W, size = 1, type = "degree", cmode = "total", binary = TRUE, method = "max")
kpset(W, size = 1, type = "mreach.degree", cmode = "total", M = 1,binary = TRUE)
kpset(A, size = 1, type = "mreach.closeness", cmode = "total", M = 1)
kpset(W, size = 1, type = "degree", cmode = "total", parallel = TRUE,cluster = 2)
rownames(W)[5]
plot(test.graph_symmetrized,
layout=(layout.graph*1.1),
rescale=F,
#edge.color=edge_test$connection,
edge.arrow.size=.5,
vertex.color=vertex_test$profession.df,
#vertex.size=((in.degree)*1.5),
vertex.size=3,
vertex.label= ifelse(vertex_test$ego == as.character(vertex_test$ego[5]), as.character(vertex_test$ego), NA),
#vertex.label=NA,
vertex.label.cex=1.0,
vertex.label.dist=0,
vertex.label.degree=0,
main='Test Data Connections (color by profession)',
#frame=TRUE,
margin=0.0001)
kpset(W, size = 1, type = "degree", cmode = "outdegree", method = "max")
kpset(W, size = 1, type = "degree", cmode = "outdegree", binary = TRUE, method = "max")
kpset(W, size = 1, type = "mreach.degree", cmode = "outdegree", M = 1,binary = TRUE)
kpset(A, size = 1, type = "mreach.closeness", cmode = "outdegree", M = 1)
kpset(W, size = 1, type = "degree", cmode = "outdegree", parallel = TRUE,cluster = 2)
rownames(W)[4]
plot(test.graph_symmetrized,
layout=(layout.graph*1.1),
rescale=F,
#edge.color=edge_test$connection,
edge.arrow.size=.5,
vertex.color=vertex_test$profession.df,
#vertex.size=((in.degree)*1.5),
vertex.size=3,
vertex.label= ifelse(vertex_test$ego == as.character(vertex_test$ego[4]), as.character(vertex_test$ego), NA),
#vertex.label=NA,
vertex.label.cex=1.0,
vertex.label.dist=0,
vertex.label.degree=0,
main='Test Data Connections (color by profession)',
#frame=TRUE,
margin=0.0001)
kpset(W, size = 2, type = "degree", cmode = "all", method = "max")
kpset(W, size = 3, type = "degree", cmode = "indegree", method = "max")
kpcent(W, c(2, 18), type = "degree", cmode = "total", method = "max")
kpcent(W, c(2, 18), type = "degree", cmode = "total", method = "min")
kpcent(W, c(2, 67), type = "degree", cmode = "total", method = "min")
head(vertex_test)
kpset(W, size = 3, type = "degree", cmode = "indegree", method = "max")
kpset(W, size = 3, type = "degree", cmode = "indegree", binary = TRUE, method = "max")
kpset(W, size = 3, type = "mreach.degree", cmode = "indegree", M = 1,binary = TRUE)
kpset(A, size = 3, type = "mreach.closeness", cmode = "indegree", M = 1)
kpset(W, size = 3, type = "degree", cmode = "indegree", parallel = TRUE,cluster = 2)
kpset(W, size = 3, type = "degree", cmode = "outdegree", method = "max")
kpset(W, size = 3, type = "degree", cmode = "outdegree", binary = TRUE, method = "max")
kpset(W, size = 3, type = "mreach.degree", cmode = "outdegree", M = 1,binary = TRUE)
kpset(A, size = 3, type = "mreach.closeness", cmode = "outdegree", M = 1)
kpset(W, size = 3, type = "degree", cmode = "outdegree", parallel = TRUE,cluster = 2)
kpset(W, size = 3, type = "degree", cmode = "total", method = "max")
kpset(W, size = 3, type = "degree", cmode = "total", binary = TRUE, method = "max")
kpset(W, size = 3, type = "mreach.degree", cmode = "total", M = 1,binary = TRUE)
kpset(A, size = 3, type = "mreach.closeness", cmode = "total", M = 1)
kpset(W, size = 3, type = "degree", cmode = "total", parallel = TRUE,cluster = 2)
Keyplayer.list<-c(2,4,5,9,14,16,17,18,28,63,67)
data_logistic_test<-vertex_test
col2=ifelse(rownames(data_logistic_test) %in% Keyplayer.list,1,0)
col2
Keyplay.bool=ifelse(rownames(data_logistic_test) %in% Keyplayer.list,1,0)
data_logistic_test<-cbind(Keyplay.bool,data_logistic_test)
View(data_logistic_test)
data_logistic_test$ego<-NULL
View(data_logistic_test)
model <- glm(Keyplay.bool ~.,family=binomial(link='logit'),data=data_logistic_test)
model
View(data_logistic_test)
colnames(data_logistic_test)
str(data_logistic_test)
data_logistic_test$issues.other.txt.vq<-NULL
model <- glm(Keyplay.bool ~.,family=binomial(link='logit'),data=data_logistic_test)
View(data_logistic_test)
data_logistic_test$q1f.issues.other.txt.vq<-NULL
model <- glm(Keyplay.bool ~.,family=binomial(link='logit'),data=data_logistic_test)
str(data_logistic_test)
colnames(data_logistic_test)
data_logistic_test<-vertex_test
colnames(data_logistic_test)
str(data_logistic_test)
Keyplay.bool=ifelse(rownames(data_logistic_test) %in% Keyplayer.list,1,0)
data_logistic_test<-cbind(Keyplay.bool,data_logistic_test)
colnames(data_logistic_test)
data_logistic_test <- subset(data_logistic_test,select=c(1,3,10,11,12,13,14,15))
model <- glm(Keyplay.bool ~.,family=binomial(link='logit'),data=data_logistic_test)
model
summary(model)
colnames(data_logistic_test)
data_logistic_test<-vertex_test
Keyplay.bool=ifelse(rownames(data_logistic_test) %in% Keyplayer.list,1,0)
data_logistic_test<-cbind(Keyplay.bool,data_logistic_test)
colnames(data_logistic_test)
data_logistic_test <- subset(data_logistic_test,
select=c(1,3,10,11,12,13,14,15,16,
17,18,19,20,21,22,23,24,25,26,27,28))
model <- glm(Keyplay.bool ~.,family=binomial(link='logit'),data=data_logistic_test)
data_logistic_test <- subset(data_logistic_test,
select=c(1,3,10,11,12,13,14,15,16,
17,18,19,20,21,22,23))
data_logistic_test<-vertex_test
str(data_logistic_test)
Keyplay.bool=ifelse(rownames(data_logistic_test) %in% Keyplayer.list,1,0)
data_logistic_test<-cbind(Keyplay.bool,data_logistic_test)
colnames(data_logistic_test)
data_logistic_test <- subset(data_logistic_test,
select=c(1,3,10,11,12,13,14,15,16,
17,18,19,20,21,22,23))
model <- glm(Keyplay.bool ~.,family=binomial(link='logit'),data=data_logistic_test)
data_logistic_test<-vertex_test
str(data_logistic_test)
Keyplay.bool=ifelse(rownames(data_logistic_test) %in% Keyplayer.list,1,0)
data_logistic_test<-cbind(Keyplay.bool,data_logistic_test)
colnames(data_logistic_test)
data_logistic_test <- subset(data_logistic_test,
select=c(1,3,10,11,12,13,14,15,16,
17,18,19))
model <- glm(Keyplay.bool ~.,family=binomial(link='logit'),data=data_logistic_test)
summary(model)
data_logistic_test <- subset(data_logistic_test,
select=c(1,3,10,11,12,13,14,15))
data_logistic_test<-vertex_test
str(data_logistic_test)
Keyplay.bool=ifelse(rownames(data_logistic_test) %in% Keyplayer.list,1,0)
data_logistic_test<-cbind(Keyplay.bool,data_logistic_test)
colnames(data_logistic_test)
data_logistic_test <- subset(data_logistic_test,
select=c(1,3,10,11,12,13,14,15))
model <- glm(Keyplay.bool ~.,family=binomial(link='logit'),data=data_logistic_test)
summary(model)

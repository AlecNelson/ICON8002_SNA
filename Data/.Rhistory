#frame=TRUE,
margin=0.0001)
layout.graph <- layout_(test.graph, with_graphopt())
plot(test.graph_symmetrized,
layout=layout.graph,
#edge.color=edge_test$connection,
edge.arrow.size=.5,
vertex.color=vertex_test$profession,
vertex.size=((in.degree)*1.5),
vertex.label=NA,
vertex.label.cex=0.7,
vertex.label.dist=1,
vertex.label.degree=-0.6,
main='Test Data Connections (color by profession)',
#frame=TRUE,
margin=0.0001)
layout.graph <- layout_(test.graph, with_kk())
plot(test.graph_symmetrized,
layout=layout.graph,
#edge.color=edge_test$connection,
edge.arrow.size=.5,
vertex.color=vertex_test$profession,
vertex.size=((in.degree)*1.5),
vertex.label=NA,
vertex.label.cex=0.7,
vertex.label.dist=1,
vertex.label.degree=-0.6,
main='Test Data Connections (color by profession)',
#frame=TRUE,
margin=0.0001)
layout.graph <- layout_(test.graph, with_lgl())
plot(test.graph_symmetrized,
layout=layout.graph,
#edge.color=edge_test$connection,
edge.arrow.size=.5,
vertex.color=vertex_test$profession,
vertex.size=((in.degree)*1.5),
vertex.label=NA,
vertex.label.cex=0.7,
vertex.label.dist=1,
vertex.label.degree=-0.6,
main='Test Data Connections (color by profession)',
#frame=TRUE,
margin=0.0001)
layout.graph <- layout_(test.graph, with_mds())
plot(test.graph_symmetrized,
layout=layout.graph,
#edge.color=edge_test$connection,
edge.arrow.size=.5,
vertex.color=vertex_test$profession,
vertex.size=((in.degree)*1.5),
vertex.label=NA,
vertex.label.cex=0.7,
vertex.label.dist=1,
vertex.label.degree=-0.6,
main='Test Data Connections (color by profession)',
#frame=TRUE,
margin=0.0001)
layout.graph <- layout_(test.graph, with_sugiyama())
plot(test.graph_symmetrized,
layout=layout.graph,
#edge.color=edge_test$connection,
edge.arrow.size=.5,
vertex.color=vertex_test$profession,
vertex.size=((in.degree)*1.5),
vertex.label=NA,
vertex.label.cex=0.7,
vertex.label.dist=1,
vertex.label.degree=-0.6,
main='Test Data Connections (color by profession)',
#frame=TRUE,
margin=0.0001)
layout.graph <- layout_(test.graph, nicely())
plot(test.graph_symmetrized,
layout=layout.graph,
#edge.color=edge_test$connection,
edge.arrow.size=.5,
vertex.color=vertex_test$profession,
vertex.size=((in.degree)*1.5),
vertex.label=NA,
vertex.label.cex=0.7,
vertex.label.dist=1,
vertex.label.degree=-0.6,
main='Test Data Connections (color by profession)',
#frame=TRUE,
margin=0.0001)
#VERTEX ATTRIBUTE GENERATOR
#Name generator
ego.df<-randomNames(2000, which.names="both",ethnicity = c(3:5),
name.order="last.first",name.sep=", ")
#Profession generator
profession<-c("Commercial fisherman","Commercial crabbers or dealer","Dock and fish house", "Shellfish gatherer")
profession.df<-sample(profession,100,replace=TRUE,prob = c(0.53,.20,.15,.12))
issues.economic.vq<-round(runif(100, min = 0, max=1))
issues.environmental.vq<-round(runif(100, min = 0, max=1))
issues.social.vq<-round(runif(100, min = 0, max=1))
issues.political.vq<-round(runif(100, min = 0, max=1))
issues.other.vq<-round(runif(100, min = 0, max=1))
issues.other.txt.vq<-randomNames(100, which.names="first")
ls()
vq<-ls(pattern = ".vq")
##################
##################
vertex.test.df <-as.data.frame(cbind(ego.df,as.data.frame(mget(vq))))
# vertex.test.df <-as.data.frame(cbind(ego.df,profession,issues.economic,issues.environmental,issues.social,issues.political,issues.other,issues.other.txt))
names(vertex.test.df)[1]="ego"
write.csv(vertex.test.df,"vertex_test_df.csv")
#Vertex ego list
ego.df<-as.vector(vertex.test.df$ego)
max_connections=7
alter.test.df<-data.frame()
for(i in 1:length(ego.df)){
ego.df.rm<-ego.df[!ego.df== ego.df[i]]
alter.i<-sample(ego.df.rm,sample(1:max_connections,1),replace = FALSE)
alter.df.i<-cbind(rep(ego.df[i],length(alter.i)),alter.i)
alter.test.df<-rbind(alter.test.df,alter.df.i)
}
str(alter.test.df)
names(alter.test.df)<-c("ego","alter")
##################
#Interactions question:
interaction.freq<-round(runif(nrow(alter.test.df), min = 0, max=3))
##################
alter.test.df <-as.data.frame(cbind(alter.test.df,interaction.freq))
write.csv(alter.test.df,"edge_test_df.csv")
vertex_test<- read.csv(vertex_datapath,header=T, row.names = 1)
edge_test<- read.csv(edge_datapath,header=T, row.names = 1)
str(vertex_test)
str(edge_test)
# Before we merge these data, we need to make sure 'ego' and 'alter' are the
# same across data sets. We can compare each row using the == syntax.
# The command below should return TRUE for every row if all ego rows
# are the same :
unique(sort(vertex_test$ego)) == unique(sort(edge_test$ego))
# We can just have R return which row entries are not equal using the syntax below:
which(unique(sort(vertex_test$ego)) != unique(sort(edge_test$ego)))
#Combine edge and vertex attribute information into igraph format
test.graph <- graph.data.frame(d = edge_test, vertices = vertex_test)
head(vertex_test)
summary(vertex_test)
#VERTEX ATTRIBUTE GENERATOR
#Name generator
ego.df<-randomNames(2000, which.names="both"#,ethnicity = c(3:5)
,name.order="last.first",name.sep=", ")
#Profession generator
profession<-c("Commercial fisherman","Commercial crabbers or dealer","Dock and fish house", "Shellfish gatherer")
profession.df<-sample(profession,100,replace=TRUE,prob = c(0.53,.20,.15,.12))
##################
#Issues question:
issues.economic.vq<-round(runif(100, min = 0, max=1))
issues.environmental.vq<-round(runif(100, min = 0, max=1))
issues.social.vq<-round(runif(100, min = 0, max=1))
issues.political.vq<-round(runif(100, min = 0, max=1))
issues.other.vq<-round(runif(100, min = 0, max=1))
issues.other.txt.vq<-randomNames(100, which.names="first")
ls()
vq<-ls(pattern = ".vq")
##################
vertex.test.df <-as.data.frame(cbind(ego.df,as.data.frame(mget(vq))))
# vertex.test.df <-as.data.frame(cbind(ego.df,profession,issues.economic,issues.environmental,issues.social,issues.political,issues.other,issues.other.txt))
names(vertex.test.df)[1]="ego"
write.csv(vertex.test.df,"vertex_test_df.csv")
#################################################################
#EDGE ATTRIBUTE GENERATOR
#Vertex ego list
ego.df<-as.vector(vertex.test.df$ego)
max_connections=7
alter.test.df<-data.frame()
for(i in 1:length(ego.df)){
ego.df.rm<-ego.df[!ego.df== ego.df[i]]
alter.i<-sample(ego.df.rm,sample(1:max_connections,1),replace = FALSE)
alter.df.i<-cbind(rep(ego.df[i],length(alter.i)),alter.i)
alter.test.df<-rbind(alter.test.df,alter.df.i)
}
str(alter.test.df)
names(alter.test.df)<-c("ego","alter")
##################
#Interactions question:
interaction.freq<-round(runif(nrow(alter.test.df), min = 0, max=3))
##################
alter.test.df <-as.data.frame(cbind(alter.test.df,interaction.freq))
write.csv(alter.test.df,"edge_test_df.csv")
vertex_test<- read.csv(vertex_datapath,header=T, row.names = 1)
edge_test<- read.csv(edge_datapath,header=T, row.names = 1)
summary(vertex_test)
#Combine edge and vertex attribute information into igraph format
test.graph <- graph.data.frame(d = edge_test, vertices = vertex_test)
#VERTEX ATTRIBUTE GENERATOR
#Name generator
ego.df<-randomNames(1200, which.names="both"#,ethnicity = c(3:5)
,name.order="last.first",name.sep=", ")
#Profession generator
profession<-c("Commercial fisherman","Commercial crabbers or dealer","Dock and fish house", "Shellfish gatherer")
profession.df<-sample(profession,100,replace=TRUE,prob = c(0.53,.20,.15,.12))
#################
#Issues question:
issues.economic.vq<-round(runif(100, min = 0, max=1))
issues.environmental.vq<-round(runif(100, min = 0, max=1))
issues.social.vq<-round(runif(100, min = 0, max=1))
issues.political.vq<-round(runif(100, min = 0, max=1))
issues.other.vq<-round(runif(100, min = 0, max=1))
issues.other.txt.vq<-randomNames(100, which.names="first")
ls()
vq<-ls(pattern = ".vq")
##################
vertex.test.df <-as.data.frame(cbind(ego.df,as.data.frame(mget(vq))))
# vertex.test.df <-as.data.frame(cbind(ego.df,profession,issues.economic,issues.environmental,issues.social,issues.political,issues.other,issues.other.txt))
names(vertex.test.df)[1]="ego"
write.csv(vertex.test.df,"vertex_test_df.csv")
#################################################################
#EDGE ATTRIBUTE GENERATOR
#Vertex ego list
ego.df<-as.vector(vertex.test.df$ego)
max_connections=7
alter.test.df<-data.frame()
for(i in 1:length(ego.df)){
ego.df.rm<-ego.df[!ego.df== ego.df[i]]
alter.i<-sample(ego.df.rm,sample(1:max_connections,1),replace = FALSE)
alter.df.i<-cbind(rep(ego.df[i],length(alter.i)),alter.i)
alter.test.df<-rbind(alter.test.df,alter.df.i)
}
str(alter.test.df)
names(alter.test.df)<-c("ego","alter")
##################
#Interactions question:
interaction.freq<-round(runif(nrow(alter.test.df), min = 0, max=3))
##################
alter.test.df <-as.data.frame(cbind(alter.test.df,interaction.freq))
write.csv(alter.test.df,"edge_test_df.csv")
vertex_test<- read.csv(vertex_datapath,header=T, row.names = 1)
edge_test<- read.csv(edge_datapath,header=T, row.names = 1)
str(vertex_test)
summary(vertex_test)
#Combine edge and vertex attribute information into igraph format
test.graph <- graph.data.frame(d = edge_test, vertices = vertex_test)
summary(test.graph)
test.graph
V(test.graph)
#Can convert to undirected
test.graph_symmetrized <- as.undirected(test.graph, mode='collapse')
in.degree<-degree(test.graph,mode="in")
plot(test.graph_symmetrized,
#edge.color=edge_test$connection,
edge.arrow.size=.5,
vertex.color=vertex_test$profession,
vertex.size=((in.degree)*1.5),
vertex.label=NA,
vertex.label.cex=0.7,
vertex.label.dist=1,
vertex.label.degree=-0.6,
main='Test Data Connections (color by profession)',
#frame=TRUE,
margin=0.0001)
## network metrics
degree(test.graph)
which.max(degree(test.graph))
which.min(degree(test.graph))
diameter(test.graph)
closeness(test.graph)
reciprocity(test.graph)
ecount(test.graph)
vcount(test.graph)
edge_density(test.graph)
#Display information as matrix format
test.graph[]
test.graph_symmetrized <- as.undirected(test.graph, mode='collapse')
in.degree<-degree(test.graph,mode="in")
layout.graph <- layout_(test.graph, nicely())
plot(test.graph_symmetrized,
layout=layout.graph,
#edge.color=edge_test$connection,
edge.arrow.size=.5,
vertex.color=vertex_test$profession,
vertex.size=((in.degree)*1.5),
vertex.label=NA,
vertex.label.cex=0.7,
vertex.label.dist=1,
vertex.label.degree=-0.6,
main='Test Data Connections (color by profession)',
#frame=TRUE,
margin=0.0001)
layout.graph <- layout_(test.graph, with_drl())
plot(test.graph_symmetrized,
layout=layout.graph,
#edge.color=edge_test$connection,
edge.arrow.size=.5,
vertex.color=vertex_test$profession,
vertex.size=((in.degree)*1.5),
vertex.label=NA,
vertex.label.cex=0.7,
vertex.label.dist=1,
vertex.label.degree=-0.6,
main='Test Data Connections (color by profession)',
#frame=TRUE,
margin=0.0001)
layout.graph <- layout_(test.graph, with_fr())
plot(test.graph_symmetrized,
layout=layout.graph,
#edge.color=edge_test$connection,
edge.arrow.size=.5,
vertex.color=vertex_test$profession,
vertex.size=((in.degree)*1.5),
vertex.label=NA,
vertex.label.cex=0.7,
vertex.label.dist=1,
vertex.label.degree=-0.6,
main='Test Data Connections (color by profession)',
#frame=TRUE,
margin=0.0001)
setwd(input_datapath)
pdf("SNA_Output_test_1200_drl.pdf")
test.graph_symmetrized <- as.undirected(test.graph, mode='collapse')
layout.graph <- layout_(test.graph, with_drl())
plot(test.graph_symmetrized,
layout=layout.graph,
#edge.color=edge_test$connection,
edge.arrow.size=.5,
vertex.color=vertex_test$profession,
vertex.size=((in.degree)*1.5),
vertex.label=NA,
vertex.label.cex=0.7,
vertex.label.dist=1,
vertex.label.degree=-0.6,
main='Test Data Connections (color by profession)',
#frame=TRUE,
margin=0.0001)
dev.off()
setwd(input_datapath)
pdf("SNA_Output_test_1200_fr.pdf")
layout.graph <- layout_(test.graph, with_fr())
plot(test.graph_symmetrized,
layout=layout.graph,
#edge.color=edge_test$connection,
edge.arrow.size=.5,
vertex.color=vertex_test$profession,
vertex.size=((in.degree)*1.5),
vertex.label=NA,
vertex.label.cex=0.7,
vertex.label.dist=1,
vertex.label.degree=-0.6,
main='Test Data Connections (color by profession)',
#frame=TRUE,
margin=0.0001)
dev.off()
#layout.graph <- layout_(test.graph, with_dh())
layout.graph <- layout_(test.graph, with_graphopt())
plot(test.graph_symmetrized,
layout=layout.graph,
#edge.color=edge_test$connection,
edge.arrow.size=.5,
vertex.color=vertex_test$profession,
vertex.size=((in.degree)*1.5),
vertex.label=NA,
vertex.label.cex=0.7,
vertex.label.dist=1,
vertex.label.degree=-0.6,
main='Test Data Connections (color by profession)',
#frame=TRUE,
margin=0.0001)
plot(test.graph_symmetrized,
layout=layout.graph,
#edge.color=edge_test$connection,
edge.arrow.size=.5,
vertex.color=vertex_test$profession,
#vertex.size=((in.degree)*1.5),
vertex.size=0.5,
vertex.label=NA,
vertex.label.cex=0.7,
vertex.label.dist=1,
vertex.label.degree=-0.6,
main='Test Data Connections (color by profession)',
#frame=TRUE,
margin=0.0001)
plot(test.graph_symmetrized,
layout=layout.graph,
#edge.color=edge_test$connection,
edge.arrow.size=.5,
vertex.color=vertex_test$profession,
#vertex.size=((in.degree)*1.5),
vertex.size=1.5,
vertex.label=NA,
vertex.label.cex=0.7,
vertex.label.dist=1,
vertex.label.degree=-0.6,
main='Test Data Connections (color by profession)',
#frame=TRUE,
margin=0.0001)
plot(test.graph_symmetrized,
layout=layout.graph,
#edge.color=edge_test$connection,
edge.arrow.size=.5,
vertex.color=vertex_test$profession,
#vertex.size=((in.degree)*1.5),
vertex.size=3,
vertex.label=NA,
vertex.label.cex=0.7,
vertex.label.dist=1,
vertex.label.degree=-0.6,
main='Test Data Connections (color by profession)',
#frame=TRUE,
margin=0.0001)
layout.graph <- layout_(test.graph, with_drl())
plot(test.graph_symmetrized,
layout=layout.graph,
#edge.color=edge_test$connection,
edge.arrow.size=.5,
vertex.color=vertex_test$profession,
#vertex.size=((in.degree)*1.5),
vertex.size=3,
vertex.label=NA,
vertex.label.cex=0.7,
vertex.label.dist=1,
vertex.label.degree=-0.6,
main='Test Data Connections (color by profession)',
#frame=TRUE,
margin=0.0001)
layout.graph <- layout_(test.graph, with_fr())
plot(test.graph_symmetrized,
layout=layout.graph,
#edge.color=edge_test$connection,
edge.arrow.size=.5,
vertex.color=vertex_test$profession,
#vertex.size=((in.degree)*1.5),
vertex.size=3,
vertex.label=NA,
vertex.label.cex=0.7,
vertex.label.dist=1,
vertex.label.degree=-0.6,
main='Test Data Connections (color by profession)',
#frame=TRUE,
margin=0.0001)
layout.graph <- layout_(test.graph, nicely())
plot(test.graph_symmetrized,
layout=layout.graph,
#edge.color=edge_test$connection,
edge.arrow.size=.5,
vertex.color=vertex_test$profession,
#vertex.size=((in.degree)*1.5),
vertex.size=3,
vertex.label=NA,
vertex.label.cex=0.7,
vertex.label.dist=1,
vertex.label.degree=-0.6,
main='Test Data Connections (color by profession)',
#frame=TRUE,
margin=0.0001)
plot(test.graph_symmetrized,
layout=layout.graph,
#edge.color=edge_test$connection,
edge.arrow.size=.5,
vertex.color=vertex_test$profession,
#vertex.size=((in.degree)*1.5),
vertex.size=3,
vertex.label=NA,
vertex.label.cex=0.7,
vertex.label.dist=1,
vertex.label.degree=-0.6,
main='Test Data Connections (color by profession)',
#frame=TRUE,
margin=0.0001)
layout.graph <- layout_(test.graph, with_drl())
#layout_nicely tries to choose an appropriate layout function for the supplied graph, and uses that
# to generate the layout. The current implementation works like this:
#   1. If the graph has a graph attribute called ‘layout’, then this is used. If this attribute is an R
# function, then it is called, with the graph and any other extra arguments.
# 2. Otherwise, if the graph has vertex attributes called ‘x’ and ‘y’, then these are used as coordinates
# If the graph has an additional ‘z’ vertex attribute, that is also used.
# 3. Otherwise, if the graph is connected and has less than 1000 vertices, the Fruchterman-Reingold
# layout is used, by calling layout_with_fr.
# 4. Otherwise the DrL layout is used, layout_with_drl is called.
layout.graph <- layout_(test.graph, nicely())
plot(test.graph_symmetrized,
layout=layout.graph,
#edge.color=edge_test$connection,
edge.arrow.size=.5,
vertex.color=vertex_test$profession,
#vertex.size=((in.degree)*1.5),
vertex.size=3,
vertex.label=NA,
vertex.label.cex=0.7,
vertex.label.dist=1,
vertex.label.degree=-0.6,
main='Test Data Connections (color by profession)',
#frame=TRUE,
margin=0.0001)
setwd(input_datapath)
pdf("SNA_Output_test_1200_vertex_nicely.pdf")
#layout_nicely tries to choose an appropriate layout function for the supplied graph, and uses that
# to generate the layout. The current implementation works like this:
#   1. If the graph has a graph attribute called ‘layout’, then this is used. If this attribute is an R
# function, then it is called, with the graph and any other extra arguments.
# 2. Otherwise, if the graph has vertex attributes called ‘x’ and ‘y’, then these are used as coordinates
# If the graph has an additional ‘z’ vertex attribute, that is also used.
# 3. Otherwise, if the graph is connected and has less than 1000 vertices, the Fruchterman-Reingold
# layout is used, by calling layout_with_fr.
# 4. Otherwise the DrL layout is used, layout_with_drl is called.
layout.graph <- layout_(test.graph, nicely())
plot(test.graph_symmetrized,
layout=layout.graph,
#edge.color=edge_test$connection,
edge.arrow.size=.5,
vertex.color=vertex_test$profession,
#vertex.size=((in.degree)*1.5),
vertex.size=3,
vertex.label=NA,
vertex.label.cex=0.7,
vertex.label.dist=1,
vertex.label.degree=-0.6,
main='Test Data Connections (color by profession)',
#frame=TRUE,
margin=0.0001)
dev.off()

Grass<-3
Shrub<-2
Weeds<-4
HeightsPower<-c(LowPower,MediumPower,HighPower)
StylePower<-c(SimplePower,StandardPower,SuperPower)
Flow<-c(Flow1,Flow2,Flow3)
HeightsTime<-c(LowTime,MediumTime,HighTime)
StyleTime<-c(SimpleTime,StandardTime,SuperTime)
Terrain<-c(Grass,Shrub,Weeds)
Power<-HeightsPower[1]*StylePower[1]*Flow[1]
Power.results<- vector(mode="numeric", length=0)
Samples<-vector(mode="numeric", length=0)
for(i in 1:length(HeightsPower)){
for(j in 1:length(StylePower)){
for(k in 1:length(Flow)){
Power.ijk<-HeightsPower[i]*StylePower[j]*Flow[k]
print(Power.ijk)
Sample.i<-i
Sample.j<-j
Sample.k<-k
Sample.ijk<-paste(Sample.i,Sample.j,Sample.k)
Sample.ijk<-as.character(Sample.ijk)
Samples<-c(Samples,Sample.ijk)
Power.results<-c(Power.results,Power.ijk)
}
}
}
Time<-HeightsTime[1]*StyleTime[1]*Terrain[1]
Time.results<- vector(mode="numeric", length=0)
for(i in 1:length(HeightsTime)){
for(j in 1:length(StyleTime)){
for(k in 1:length(Terrain)){
Time.ijk<-HeightsTime[i]*StyleTime[j]*Terrain[k]
print(Time.ijk)
Time.results<-c(Time.results,Time.ijk)
}
}
}
Summary.Table<-cbind(Samples,Power.results,Time.results)
Ratio<-as.numeric(Summary.Table[,2])/as.numeric(Summary.Table[,3])
Summary.Table<-cbind(Summary.Table,Ratio)
Summary.Table
pb <- progress_bar$new(
format = "  downloading [:bar] :percent eta: :eta",
total = 100, clear = FALSE, width= 60)
install.packages("Progress")
install.packages("progress")
library(progress)
pb <- progress_bar$new(
format = "  downloading [:bar] :percent eta: :eta",
total = 100, clear = FALSE, width= 60)
for (i in 1:100) {
pb$tick()
Sys.sleep(1 / 100)
}
for (i in 1:100) {
pb$tick()
Sys.sleep(1 / 100)
}
for (i in 1:100) {
pb$tick()
Sys.sleep(1 / 100)
}
pb <- progress_bar$new(
format = "  downloading [:bar] :percent eta: :eta",
total = 100, clear = FALSE, width= 60)
for (i in 1:100) {
pb$tick()
Sys.sleep(1 / 100)
}
myfun <- function(x){(subset((ClassStat(Grassland1, cellsize = 30, bkgd = 0)), select = ("prop.like.adjacencies")))}
DispG<-(focal(Grassland1, w=matrix(1/289,nrow=17,ncol=17), fun = myfun, filename='DispG'))
pb$tick()
pb
pb <- progress_bar$new(
format = "  downloading [:bar] :percent eta: :eta",
total = 100, clear = FALSE, width= 60)
for (i in 1:100) {
pb$tick()
Sys.sleep(1 / 100)
}
pb <- progress_bar$new(
format = "  downloading [:bar] :percent eta: :eta",
total = 100, clear = FALSE, width= 60)
for (i in 1:100) {
pb$tick()
Sys.sleep(1 / 100)
print(i)
}
pb <- progress_bar$new(
format = "  downloading [:bar] :percent eta: :eta",
total = 100, clear = FALSE, width= 60)
for (i in 1:100) {
pb$tick()
Sys.sleep(1 / 10)
print(i)
}
pb <- progress_bar$new(
format = "[:bar] :percent eta: :eta",
total = 100, clear = FALSE, width= 60)
for (i in 1:100) {
pb$tick()
Sys.sleep(1 / 10)
print(i)
}
pb <- progress_bar$new(
format = "[:bar] :percent eta: :eta",
total = 100, clear = FALSE, width= 60)
for (i in 1:100) {
pb$tick()
Sys.sleep(1 / 10)
print(i*1000)
}
pb <- progress_bar$new(
format = "[:bar] :percent eta: :eta",
total = 100, clear = FALSE, width= 60)
for (i in 1:100) {
pb$tick()
Sys.sleep(1 / 10)
print(i*1000000)
}
i=1
pb$tick()
Sys.sleep(1 / 10)
print(i*1000000)
print(pb$tick())
proc.time()
ptm <- proc.time()
proc.time() - ptm
install.packages("rtweet",dependencies=TRUE)
library(rtweet)
install.packages("rtweet")
library(rtweet)
install.packages("openssl")
install.packages("rtweet",dependencies = TRUE)
install.packages("leaflet", dependecies=TRUE)
install.packages("crosstalk")
install.packages("png")
install.packages("leaflet")
library(leaflet)
basedirectory <- "/Users/alecnelson/Documents/Clemson_Files/MastersThesis/DataAnalysis"
inputdata_path <- "D:/DataAnalysis/TestData"
countryshape_path <- "D:/DataAnalysis/App_Boundary_SHP"
#outputdata_path <- "D:/DataAnalysis/TestResults5"
#monthlydata_path<-"D:/DataAnalysis/MonthlyData3"
sampledata_path<-"D:/DataAnalysis/TestSample"
SampledCSV_path<-"D:/DataAnalysis/SampledClimateData"
EnvirData_path<-"D:/DataAnalysis/EnvironmentData"
CombinIter_NoSeas_path<-"/Users/alecnelson/Documents/Clemson_Files/MastersThesis/DataAnalysis/MultiVarLimit_Iter_NO_SAdj"
CombinIter_SeasAdj_path<-"/Users/alecnelson/Documents/Clemson_Files/MastersThesis/DataAnalysis/MultiVarLimit_Iter_SeasonAdj"
setwd(inputdata_path)
list.of.packages <- c("raster","pracma", "reshape","car","compute.es","effects","rgdal","fields",
"chron", "ff","downloader","magrittr","maptools","GSIF","rgeos","ggplot2",
"multcomp","pastecs","data.table","MuMIn", "ncdf4","sp","dismo","stringr",
"data.table","RCurl","rio","RNetCDF","parallel","qicharts","qcc","zoo","dplyr","purrr","plyr",
"geoR","geoRglm","MSQC","coda","MASS","relaimpo","arcgisbinding","lme4","glmm","nlme","arm","rms")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)){install.packages(new.packages)}
#Load all packages
lapply(list.of.packages, require, character.only = TRUE)
setwd(inputdata_path)
raster_file_list <- list.files(pattern = ".nc" , all.files = FALSE , full.names = FALSE )
countryshape<-rgdal::readOGR( countryshape_path, "AppalachianLvl2_GCS84" )
sample_points<-rgdal::readOGR("D:/DataAnalysis", "SamplePoints1")
plot(pch~col)
pch<-seq(1:25)
plot(pch~col)
plot(pch)
plot(NA, xlim=c(1,25), ylim=c(0,1))
points(1:4, runif(4), type="b", pch=19)
par(mar=c(3,3,2,2))
plot(NA, xlim=c(1,25), ylim=c(0,1))
points(1:4, runif(4), type="b", pch=19)
points(1:25, runif(4), type="b", pch=19)
points(1:20, runif(4), type="b", pch=19)
points(1:20, runif(20), type="b", pch=19)
points(1:20, 1, type="b", pch=19)
par(mar=c(3,3,2,2))
plot(NA, xlim=c(1,25), ylim=c(0,1))
points(1, type="b", pch=19)
plot(NA, xlim=c(1,25), ylim=c(0,2))
points(1, type="b", pch=19)
points(1, type="b", pch=1)
points(1, type="b", pch=2)
points(1, type="b", pch=1)
points(1, type="b", pch=1, col=1)
points(1, pch=1, col=1)
par(mar=c(3,3,2,2))
plot(NA, xlim=c(1,25), ylim=c(0,2))
points(1, pch=1, col=1)
par(mar=c(3,3,2,2))
plot(NA, xlim=c(1,25), ylim=c(0,2))
for(i in 1:25){
points(1, pch=i, col=i)
}
par(mar=c(3,3,2,2))
plot(NA, xlim=c(1,25), ylim=c(0,2))
for(i in 1:25){
points(1:25, pch=i, col=i)
}
par(mar=c(3,3,2,2))
plot(NA, xlim=c(1,25), ylim=c(0,2))
for(i in 1:25){
points(1,i, pch=i, col=i)
}
par(mar=c(3,3,2,2))
plot(NA, xlim=c(1,25), ylim=c(0,2))
for(i in 1:25){
points(i,1, pch=i, col=i)
}
par(mar=c(3,3,2,2))
plot(NA, xlim=c(1,25), ylim=c(0,2))
for(i in 1:25){
points(i,1, pch=i, col=2)
}
par(mar=c(3,3,2,2))
plot(NA, xlim=c(1,25), ylim=c(0,2),xlab="pch, col", ylab="")
for(i in 1:25){
points(i,1, pch=i, col=2)
}
par(mar=c(3,3,2,2)+0.2)
plot(NA, xlim=c(1,25), ylim=c(0,2),xlab="pch, col", ylab="")
for(i in 1:25){
points(i,1, pch=i, col=2)
}
par(mar=c(3,3,2,2)+1)
plot(NA, xlim=c(1,25), ylim=c(0,2),xlab="pch, col", ylab="")
for(i in 1:25){
points(i,1, pch=i, col=2)
}
par(mar=c(3,3,2,2)+1)
plot(NA, xlim=c(1,25), ylim=c(0,2),xlab="pch, col", yaxt="n")
for(i in 1:25){
points(i,1, pch=i, col=2)
}
par(mar=c(3,3,2,2)+1)
plot(NA, xlim=c(1,25), ylim=c(0,2),xlab="pch, col", ylab="",yaxt="n")
for(i in 1:25){
points(i,1, pch=i, col=2)
}
par(mar=c(2,2,1,1)+1)
plot(NA, xlim=c(1,25), ylim=c(0,2),xlab="pch, col", ylab="",yaxt="n")
for(i in 1:25){
points(i,1, pch=i, col=2)
}
par(mar=c(2,2,1,1)+2)
plot(NA, xlim=c(1,25), ylim=c(0,2),xlab="pch, col", ylab="",yaxt="n")
for(i in 1:25){
points(i,1, pch=i, col=2)
}
par(mar=c(2,2,1,1)+2.5)
plot(NA, xlim=c(1,25), ylim=c(0,2),xlab="pch, col", ylab="",yaxt="n")
for(i in 1:25){
points(i,1, pch=i, col=2)
}
par(mar=c(2,2,1,1)+2)
plot(NA, xlim=c(1,25), ylim=c(0,2),xlab="pch, col", ylab="",yaxt="n")
for(i in 1:25){
points(i,1, pch=i, col=i)
}
par(mar=c(2,2,1,1)+2)
plot(NA, xlim=c(1,25), ylim=c(0,2),xlab="pch, col", ylab="",yaxt="n")
for(i in 1:25){
points(i,1, pch=i, col=2)
}
library(ggplot2)
install.packages("ggplot2")
install.packages("ggplot2")
library(ggplot2)
install.packages("ggplot2")
install.packages("scales")
install.packages("scales")
install.packages("ggplot2")
install.packages("rlang")
install.packages("ggplot2")
install.packages("ggplot2")
x <- seq(-4, 4, length=100)
hx <- dnorm(x)
degf <- c(1, 3, 8, 30)
colors <- c("red", "blue", "darkgreen", "gold", "black")
labels <- c("df=1", "df=3", "df=8", "df=30", "normal")
plot(x, hx, type="l", lty=2, xlab="x value",
ylab="Density", main="Comparison of t Distributions")
for (i in 1:4){
lines(x, dt(x,degf[i]), lwd=2, col=colors[i])
}
legend("topright", inset=.05, title="Distributions",
labels, lwd=2, lty=c(1, 1, 1, 1, 2), col=colors)
x <- seq(-4, 4, length=100)
hx <- dnorm(x)
degf <- c(1, 3, 8, 30)
colors <- c("red", "blue", "darkgreen", "gold", "black")
labels <- c("df=1", "df=3", "df=8", "df=30", "normal")
plot(x, hx, type="l", lty=2, xlab="x value",
ylab="Density", main="Comparison of t Distributions")
for (i in 1:4){
lines(x, dt(x,degf[i]), lwd=2, col=colors[i])
}
dbeta(x, shape1, shape2, ncp = 0, log = FALSE)
dbeta(x, 0.5, 0.5, ncp = 0, log = FALSE)
plot(dbeta(x, 0.5, 0.5, ncp = 0, log = FALSE))
plot(dbeta(x, 0.5, 0.5, ncp = 0, log = FALSE),type="l")
par(mar=c(2,2,1,1)+2)
plot(NA, xlim=c(0.00,1.00), ylim=c(0.00,2.5),xlab="X", ylab="Density")
lines(dbeta(x, 0.5, 0.5, ncp = 0, log = FALSE))
lines(dbeta(x, 0.5, 0.5, log = FALSE))
par(mar=c(2,2,1,1)+2)
plot(NA, xlim=c(0.00,1.00), ylim=c(0.00,2.5),xlab="X", ylab="Density")
lines(dbeta(x, 0.5, 0.5, log = FALSE))
par(mar=c(2,2,1,1)+2)
plot(NA, xlim=c(0.00,1.00), ylim=c(0.00,2.5),xlab="X", ylab="Density")
lines(pbeta(x, 0.5, 0.5, log = FALSE))
pbeta(x, 0.5, 0.5, log = FALSE)
p = seq(0,1, length=100)
p = seq(0,1, length=100)
plot(p, dbeta(p, 100, 100), ylab="density", type ="l", col=4)
lines(p, dbeta(p, 10, 10), type ="l", col=3)
lines(p, dbeta(p, 2, 2), col=2)
lines(p, dbeta(p, 1, 1), col=1)
legend(0.7,8, c("Be(100,100)","Be(10,10)","Be(2,2)", "Be(1,1)"),lty=c(1,1,1,1),col=c(4,3,2,1))
p = seq(0,1, length=100)
plot(p, dbeta(p, 0.5, 0.5), ylab="density", type ="l", lty=2)
lines(p, dbeta(p, 0.5, 2.0), type ="l", col="grey")
lines(p, dbeta(p, 2.0, 0.5), lty=4)
lines(p, dbeta(p, 2.0, 2.0), lty=2,col="grey")
par(mar=c(2,2,1,1)+2)
p = seq(0,1, length=100)
plot(p, dbeta(p, 0.5, 0.5), ylab="Density",xlab="X", xlim=c(0.00,1.00), ylim=c(0.00,2.5),type ="l", lty=2)
lines(p, dbeta(p, 0.5, 2.0), type ="l", col="grey")
lines(p, dbeta(p, 2.0, 0.5), lty=4)
lines(p, dbeta(p, 2.0, 2.0), lty=2,col="grey")
library(igraph)
# read.table() is the most common R command for loading data from
# files in which values are in tabular format. The function loads
# the table into a data frame object, which is the basic data type
# for most operations in R. By default, R assumes that the table
# has no header and is delimited by any white space; these
# settings are fine for our purposes here.
#
# One handy aspect of R is that you can read in data from a URL
# directly by referencing the URL in the read.table() function,
# as follows:
advice_data_frame <- read.table('http://sna.stanford.edu/sna_R_labs/data/Krack-High-Tec-edgelist-Advice.txt')
friendship_data_frame <- read.table('http://sna.stanford.edu/sna_R_labs/data/Krack-High-Tec-edgelist-Friendship.txt')
reports_to_data_frame <- read.table('http://sna.stanford.edu/sna_R_labs/data/Krack-High-Tec-edgelist-ReportsTo.txt')
View(advice_data_frame)
# For convenience, we can assign column names to our newly
# imported data frames. c() is a common generic R function that
# combines its arguments into a single vector.
colnames(advice_data_frame) <- c('ego', 'alter', 'advice_tie')
head(advice_data_frame)
colnames(friendship_data_frame) <- c('ego', 'alter', 'friendship_tie')
head(friendship_data_frame)
colnames(reports_to_data_frame) <- c('ego', 'alter', 'reports_to_tie')
head(reports_to_data_frame)
View(advice_data_frame)
# Take a look at each data frame using the 'fix()" function. Note that you'll
# need to close each fix window before R will evaluate the next line of code.
fix(advice_data_frame)
# Now that we've verified they are all the same, we can combine them into
# a single data frame.
krack_full_data_frame <- cbind(advice_data_frame,
friendship_data_frame$friendship_tie,
reports_to_data_frame$reports_to_tie)
head(krack_full_data_frame)
names(krack_full_data_frame)[4:5] <- c("friendship_tie",
"reports_to_tie")
head(krack_full_data_frame)
# Another way to build the data frame is to use R's
# data.frame syntax from the start:
krack_full_data_frame <- data.frame(ego = advice_data_frame[,1],
alter = advice_data_frame[,2],
advice_tie = advice_data_frame[,3],
friendship_tie = friendship_data_frame[,3],
reports_to_tie = reports_to_data_frame[,3])
head(krack_full_data_frame)
View(krack_full_data_frame)
View(krack_full_data_frame)
library(igraph)
# read.table() is the most common R command for loading data from
# files in which values are in tabular format. The function loads
# the table into a data frame object, which is the basic data type
# for most operations in R. By default, R assumes that the table
# has no header and is delimited by any white space; these
# settings are fine for our purposes here.
#
# One handy aspect of R is that you can read in data from a URL
# directly by referencing the URL in the read.table() function,
# as follows:
advice_data_frame <- read.table('http://sna.stanford.edu/sna_R_labs/data/Krack-High-Tec-edgelist-Advice.txt')
source("http://sna.stanford.edu/setup.R")
advice_data_frame
#FIZZBUZZ TEST
##################
ptm <- proc.time()
##################
#Alec's For() loop solution
for(i in 1:100){
if((i/3) == as.integer(i/3) & !(i/5) == as.integer(i/5)){
print("Fizz")
}else if (!(i/3) == as.integer(i/3) & (i/5) == as.integer(i/5)){
print("Buzz")
}else if((i/3) == as.integer(i/3) & (i/5) == as.integer(i/5) & (i/15) == as.integer(i/15)){
print("FizzBuzz")
}else{
print(i)
}
}
##################
proc.time() - ptm
##################
##################
ptm <- proc.time()
##################
#Bryan's For() loop solution
for(i in 1:100){
if((i/3) == as.integer(i/3) & (i/5) == as.integer(i/5)){
print("FizzBuzz")
}else if (!(i/3) == as.integer(i/3) & (i/5) == as.integer(i/5)){
print("Buzz")
}else if((i/3) == as.integer(i/3) & !(i/5) == as.integer(i/5)){
print("Fizz")
}else{
print(i)
}
}
##################
proc.time() - ptm
##################
##################
ptm <- proc.time()
##################
#Angela's For() loop solution
for(i in 1:100){
output=""
if((i/3) == as.integer(i/3)){output=paste0(output,"Fizz")}
if((i/5) == as.integer(i/5)){output=paste0(output,"Buzz")}
if(output==""){print(i)}else{print(output)}
}
##################
proc.time() - ptm
##################
##################
ptm <- proc.time()
##################
#Alec's Mutate vector solution
seq<-data.frame(seq(1:100))
fizz<-function(i){ifelse(as.integer(i/3)==i/3,"fizz",i)}
buzz<-function(i){ifelse(as.integer(i/5)==i/5,"buzz",i)}
fizzbuzz<-function(fizz,buzz){ifelse(fizz=="fizz" & buzz=="buzz","fizzbuzz",
ifelse(fizz==buzz,fizz,ifelse(fizz=="fizz",fizz,buzz)))}
seq_fizzbuzz <- mutate(seq, fizz_i = fizz(seq.1.100.),buzz_i=buzz(seq.1.100.),fizzbuzz_i=fizzbuzz(fizz_i,buzz_i))
print(seq_fizzbuzz$fizzbuzz_i)
##################
proc.time() - ptm
##################
library(igraph)
# read.table() is the most common R command for loading data from
# files in which values are in tabular format. The function loads
# the table into a data frame object, which is the basic data type
# for most operations in R. By default, R assumes that the table
# has no header and is delimited by any white space; these
# settings are fine for our purposes here.
#
# One handy aspect of R is that you can read in data from a URL
# directly by referencing the URL in the read.table() function,
# as follows:
advice_data_frame <- read.table('http://sna.stanford.edu/sna_R_labs/data/Krack-High-Tec-edgelist-Advice.txt')
friendship_data_frame <- read.table('http://sna.stanford.edu/sna_R_labs/data/Krack-High-Tec-edgelist-Friendship.txt')
reports_to_data_frame <- read.table('http://sna.stanford.edu/sna_R_labs/data/Krack-High-Tec-edgelist-ReportsTo.txt')
source("http://sna.stanford.edu/setup.R")
10000*e^(-.35)
10000*exp(-.35)
pop<-as.data.frame(10000)
pop<-as.data.frame(10000)
pop[1]
pop[1]*exp(-.35)
pop<-rbind(pop,pop.i)
pop.i<-pop[1]*exp(-.35)
pop<-rbind(pop,pop.i)
View(pop)
pop<-as.data.frame(10000)
for(i in 1:7){
pop.i<-pop[1]*exp(-.35)
pop<-rbind(pop,pop.i)
}
View(pop)
pop<-as.data.frame(10000)
for(i in 1:7){
pop.i<-pop[i]*exp(-.35)
pop<-rbind(pop,pop.i)
}
View(pop)
i=1
pop<-as.data.frame(10000)
pop.i<-pop[i]*exp(-.35)
pop<-rbind(pop,pop.i)
i=2
pop.i<-pop[i]*exp(-.35)
pop.i<-pop[i,]*exp(-.35)
pop<-rbind(pop,pop.i)
pop<-as.data.frame(10000)
for(i in 1:7){
pop.i<-pop[i,]*exp(-.35)
pop<-rbind(pop,pop.i)
}
View(pop)
(-12.2) + (3.2*ln(300))
(-12.2) + (3.2*log(300))
exp((-12.2) + (3.2*log(300)))
1.35*300*exp(-0.001*300)
source('~/Documents/GitHub/ICON8002_SNA/Analysis.Team.Test.Script_10_27.R', echo=TRUE)

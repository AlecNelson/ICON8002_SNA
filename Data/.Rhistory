# has no header and is delimited by any white space; these
# settings are fine for our purposes here.
#
# One handy aspect of R is that you can read in data from a URL
# directly by referencing the URL in the read.table() function,
# as follows:
advice_data_frame <- read.table('http://sna.stanford.edu/sna_R_labs/data/Krack-High-Tec-edgelist-Advice.txt')
friendship_data_frame <- read.table('http://sna.stanford.edu/sna_R_labs/data/Krack-High-Tec-edgelist-Friendship.txt')
reports_to_data_frame <- read.table('http://sna.stanford.edu/sna_R_labs/data/Krack-High-Tec-edgelist-ReportsTo.txt')
source("http://sna.stanford.edu/setup.R")
10000*e^(-.35)
10000*exp(-.35)
pop<-as.data.frame(10000)
pop<-as.data.frame(10000)
pop[1]
pop[1]*exp(-.35)
pop<-rbind(pop,pop.i)
pop.i<-pop[1]*exp(-.35)
pop<-rbind(pop,pop.i)
View(pop)
pop<-as.data.frame(10000)
for(i in 1:7){
pop.i<-pop[1]*exp(-.35)
pop<-rbind(pop,pop.i)
}
View(pop)
pop<-as.data.frame(10000)
for(i in 1:7){
pop.i<-pop[i]*exp(-.35)
pop<-rbind(pop,pop.i)
}
View(pop)
i=1
pop<-as.data.frame(10000)
pop.i<-pop[i]*exp(-.35)
pop<-rbind(pop,pop.i)
i=2
pop.i<-pop[i]*exp(-.35)
pop.i<-pop[i,]*exp(-.35)
pop<-rbind(pop,pop.i)
pop<-as.data.frame(10000)
for(i in 1:7){
pop.i<-pop[i,]*exp(-.35)
pop<-rbind(pop,pop.i)
}
View(pop)
(-12.2) + (3.2*ln(300))
(-12.2) + (3.2*log(300))
exp((-12.2) + (3.2*log(300)))
1.35*300*exp(-0.001*300)
############################
basedirectory <- "/Users/alecnelson/Documents/GitHub/ICON8002_SNA"
inputdata_path <- "/Users/alecnelson/Documents/GitHub/ICON8002_SNA/Data"
setwd(input_datapath)
#List packages used
list.of.packages <- c("igraph","randomNames","fabricatr","gtools")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)){install.packages(new.packages)}
#Load all packages
lapply(list.of.packages, require, character.only = TRUE)
## setting parameters
# generated data sample size
n <- 500
# This code uses the "sample" function throughout, so various hypothesized scenarios can
# easily be constructed by altering the probabilities ("prob = ...") within each line of code
################################
###########
##### Sheet 1: Vertex attributes
###########
################################
# VERTEX ATTRIBUTE GENERATOR
# Name generator
ego.df <- randomNames(n, which.names="both",ethnicity = c(3:5),
name.order="last.first",name.sep=", ")
ego.df
# Profession generator based on professions and proportions from Tookes IRB (industry role)
industry.role.options <-c ("Commercial fisherman (current)", "Commercial fisherman (former)", "Commercial crabbers or dealer (current)", "Commercial crabbers or dealer (former)",
"Dock and fish house (current)", "Dock and fish house (former)", "Shellfish gatherer (current)", "Shellfish gatherer (former)")
profession.df <- sample(industry.role.options, n, replace=TRUE, prob = c(0.265, 0.265,.10, 0.10, 0.075, 0.075, 0.06,.06))
# Prospective survey questions and answers
# 1. In your opinion, what issues are currently impacting the fishing/shrimping industry on the
# Georgia coast?
# Answer choices: Economic, environmental/ecological, social, political, other (Explain)
# Output: check all that apply, so binary response for each issue (1 = yes, 0 = no)
q1a.issues.economic.vq <- sample(c(0, 1), n, replace = T)
q1b.issues.environmental.vq <- sample(c(0, 1), n, replace = T)
q1c.issues.social.vq <- sample(c(0, 1), n, replace = T)
q1d.issues.political.vq <- sample(c(0, 1), n, replace = T)
q1e.issues.other.vq <- sample(c(0, 1), n, replace = T)
q1f.issues.other.txt.vq <- ifelse(q1e.issues.other.vq == 1, "Explanation", "N/A")
# 2. How satisfied are you with the current economic state (e.g., available market, pricing, transportation)
# of the shrimping/fishing industry on the Georgia coast?
# Answer choices: Very satisfied, satisfied, no opinion, unsatisfied, very unsatisfied
# Output: likert scale qualitative
satisfaction.options <- c("Very satisfied", "Satisfied", "No opinion", "Unsatisfied", "Very unsatisfied")
q2.satisfaction.opinion.vq <- sample(satisfaction.options, n, replace = T)
# 3. The outlook of the fishing/shrimping industry is positive
# Answer choices: Strongly agree, agree, neutral, disagree, strongly disagree
# Output: likert scale qualitative
agree.options <- c("Strongly agree", "Agree", "Neutral", "Disagree", "Strongly disagree")
q3.future.outlook.vq <- sample(agree.options, n, replace = T)
# 4. Your opinions or concerns as a member of the coastal community are considered in the decision-making process
#  Answer choices: Strongly agree, agree, neutral, disagree, strongly disagree
# Output: likert scale qualitative
q4.opinions.considered.vq <- sample(agree.options, n, replace = T)
# 5. Have you ever attended a meeting hosted by the Georgia Department of Natural Resources?
# Answer choices: Yes, No
# Output: qualitative binary
binary.qual.options <- c("Yes", "No")
q5.DNR.mtg.vq <- sample(binary.qual.options, n, replace = T)
# 6. Which dock do you use?
# Answer choices: none
# Output: free response
# creating hypothetical dock list for data generation purposes
dock.options <- c("Brunswick Dock", "Savannah Dock", "Piedmont Dock", "South GA Dock", "Derrien Dock", "St. Simons Dock", "Jekyll Dock")
q6.primary.dock.vq <- sample(dock.options, n, replace = T)
# 6a. If you use multiple docks, list them here
# Answer choices: none
# Output: free response
q6a.additional.dock.vq <- sample(c(dock.options, "N/A"), n, replace = T, p = c(.028571429, .028571429, .028571429, .028571429, .028571429, .028571429, .028571429, 0.8))
# 7. Where is your primary dock located?
# Answer choices: none
# Output: free response
#creating hypothetical dock list for data generation purposes
dock.location.options <- c("Brunswick", "Savannah", "Piedmont", "Derrien", "St. Simons", "Little St. Simons", "Jeckyll Island")
q7.dock.location.vq <- sample(dock.location.options, n, replace = T)
# 8. Primary dock location influences where you are able to fish or shrimp
# Answer choices: Strongly agree, agree, unsure, disagree, strongly disagree
# Output: likert scale qualitative
q8.dock.influence.fish.vq <- sample(agree.options, n, replace = T)
# 9. Black gill disease in coastal shrimp has influenced where and how you shrimp
# Answer choices: Strongly agree, agree, neutral, disagree, strongly disagree
# Output: likert scale qualitative
q9.black.gill.influence.vq <- sample(agree.options, n, replace = T)
# 9a. If so, how?
# Output: free response
q9a.black.gill.influence.expl.vq <- ifelse(q9.black.gill.influence.vq == "Strongly agree" | q9.black.gill.influence.vq == "Agree", "Explanation", "N/A")
# 10. Have you observed black gill disease in your shrimp catch?
# Answer choices: Yes, No
# Output: qualitative binary
q10.black.gill.observed.vq <- sample(binary.qual.options, n, replace = T)
# 10a. If yes, in which of the following coastal shrimping areas have you caught shrimp with black gill disease?
# Answer choices: North of Savannah, Between Sapelo Island and Savannah, Between St. Simons Island and Sapelo Island, Between St. Simons Island and Jekyll Island,
# South of Jekyll Island
# Output: qualitative categorical
black.gill.location.options <- c("North of Savannah", "Between Sapelo Island and Savannah", "Between St. Simons Island and Sapelo Island", "Between St. Simons Island and Jekyll Island",
"South of Jekyll Island")
q10a.black.gill.location.vq <- ifelse(q10.black.gill.observed.vq == "Yes", sample(black.gill.location.options, n, replace = T), "N/A")
# 10b. If yes, approximately when did you first observe black gill in your catch (how many years ago)?
# Answer choices: none
# Output: free response, but likely continuous integer
q10b.black.gill.time.vq <- ifelse(q10.black.gill.observed.vq == "Yes", sample(c(1:15), n, replace = T), "N/A")
########## End Vertex sheet questions. Now time to put it all together into one data frame
# tag for vertex sheet questions = ".vq"
vq<-ls(pattern = ".vq")
vq<-mixedsort(vq)
vertex.test.df <-as.data.frame(cbind(ego.df, profession.df,as.data.frame(mget(vq))))
names(vertex.test.df)[1]="ego"
write.csv(vertex.test.df,"vertex_test_df_10_15.csv")
# Vertex ego list
ego.df <- as.vector(vertex.test.df$ego)
# Setting connections
max_connections = 10
alter.test.df<-data.frame()
conn_types<-c("In-Network","Out-of-Network","Professional-Link")
alter.outnetwork.num<-100
alter.outnetwork.df <- randomNames(alter.outnetwork.num, which.names="both",ethnicity = c(1:2),name.order="last.first",name.sep=", ")
i=1
ego.df.rm <- ego.df[!ego.df == ego.df[i]]
#alter.outnetwork.df
professional.names<-ego.df[which(vertex.test.df[,2]==as.character(vertex.test.df[i,2]))]
professional.names.rm<- professional.names[!professional.names == ego.df[i]]
sample_connections<-sample(1:max_connections, 1, replace=FALSE)
sample_prob<-sample(conn_types, sample_connections, replace = T, p = c(0.1,0.1,0.8))
sample.In_Network<-(sample_connections-(count(sample_prob==conn_types[1])$freq[1]))
sample.Out_Network<-(sample_connections-(count(sample_prob==conn_types[2])$freq[1]))
sample.Profess_Link<-(sample_connections-(count(sample_prob==conn_types[3])$freq[1]))
alter.innetwork.i <- sample(ego.df.rm,sample.In_Network,replace = FALSE)
alter.outnetwork.i <- sample(alter.outnetwork.df,sample.Out_Network,replace = FALSE)
# Vertex ego list
ego.df <- as.vector(vertex.test.df$ego)
# Setting connections
max_connections = 10
alter.test.df<-data.frame()
conn_types<-c("In-Network","Out-of-Network","Professional-Link")
alter.outnetwork.num<-100
alter.outnetwork.df <- randomNames(alter.outnetwork.num, which.names="both",ethnicity = c(1:2),name.order="last.first",name.sep=", ")
ego.df.rm <- ego.df[!ego.df == ego.df[i]]
#alter.outnetwork.df
professional.names<-ego.df[which(vertex.test.df[,2]==as.character(vertex.test.df[i,2]))]
professional.names.rm<- professional.names[!professional.names == ego.df[i]]
sample_connections<-sample(1:max_connections, 1, replace=FALSE)
sample_prob<-sample(conn_types, sample_connections, replace = T, p = c(0.1,0.1,0.8))
sample.In_Network<-(sample_connections-(count(sample_prob==conn_types[1])$freq[1]))
sample.Out_Network<-(sample_connections-(count(sample_prob==conn_types[2])$freq[1]))
count(sample_prob==conn_types[1])$freq[1])
count(sample_prob==conn_types[1])$freq[1]
#List packages used
list.of.packages <- c("igraph","randomNames","fabricatr","gtools")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)){install.packages(new.packages)}
#Load all packages
lapply(list.of.packages, require, character.only = TRUE)
########################################################
count(sample_prob==conn_types[1])$freq[1]
sample.In_Network<-(sample_connections-(count(sample_prob==conn_types[1])$freq[1]))
sample_connections
sample_prob==conn_types[1]
count(sample_prob==conn_types[1])
#List packages used
list.of.packages <- c("igraph","randomNames","fabricatr","plyr","RColorBrewer","keyplayer","sna")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)){install.packages(new.packages)}
#Load all packages
lapply(list.of.packages, require, character.only = TRUE)
ego.df.rm <- ego.df[!ego.df == ego.df[i]]
ego.df <- as.vector(vertex.test.df$ego)
# Setting connections
max_connections = 10
alter.test.df<-data.frame()
conn_types<-c("In-Network","Out-of-Network","Professional-Link")
alter.outnetwork.num<-100
alter.outnetwork.df <- randomNames(alter.outnetwork.num, which.names="both",ethnicity = c(1:2),name.order="last.first",name.sep=", ")
ego.df.rm <- ego.df[!ego.df == ego.df[i]]
#alter.outnetwork.df
professional.names<-ego.df[which(vertex.test.df[,2]==as.character(vertex.test.df[i,2]))]
professional.names.rm<- professional.names[!professional.names == ego.df[i]]
sample_connections<-sample(1:max_connections, 1, replace=FALSE)
sample_prob<-sample(conn_types, sample_connections, replace = T, p = c(0.1,0.1,0.8))
sample.In_Network<-(sample_connections-(count(sample_prob==conn_types[1])$freq[1]))
sample.Out_Network<-(sample_connections-(count(sample_prob==conn_types[2])$freq[1]))
sample.Profess_Link<-(sample_connections-(count(sample_prob==conn_types[3])$freq[1]))
alter.innetwork.i <- sample(ego.df.rm,sample.In_Network,replace = FALSE)
alter.outnetwork.i <- sample(alter.outnetwork.df,sample.Out_Network,replace = FALSE)
alter.profession.i <- sample(professional.names.rm,sample.Profess_Link,replace = FALSE)
#alter.i <- sample(names.sample.list,sample(1:max_connections,1),replace = FALSE)
alter.i<-c(alter.innetwork.i,alter.outnetwork.i,alter.profession.i)
alter.i
alter.i<-c(alter.i,"Gang, Lauren")
alter.i
#Check to make sure names are not repeated in vector
union(alter.i,alter.i)
# Vertex ego list
ego.df <- as.vector(vertex.test.df$ego)
# Setting connections
max_connections = 10
alter.test.df<-data.frame()
conn_types<-c("In-Network","Out-of-Network","Professional-Link")
alter.outnetwork.num<-100
alter.outnetwork.df <- randomNames(alter.outnetwork.num, which.names="both",ethnicity = c(1:2),name.order="last.first",name.sep=", ")
# sample_connections<-sample(1:max_connections, 1, replace=FALSE)
# sample_prob<-sample(conn_types, sample_connections, replace = T, p = c(0.3,0.3,0.4))
# sample.In_Network<-count(sample_prob==conn_types[1])$freq[2]
# sample.Out_Network<-count(sample_prob==conn_types[2])$freq[2]
# sample.Profess_Link<-count(sample_prob==conn_types[3])$freq[2]
for(i in 1:length(ego.df)){
ego.df.rm <- ego.df[!ego.df == ego.df[i]]
#alter.outnetwork.df
professional.names<-ego.df[which(vertex.test.df[,2]==as.character(vertex.test.df[i,2]))]
professional.names.rm<- professional.names[!professional.names == ego.df[i]]
#names.sample.list<-c(ego.df.rm,alter.outnetwork.df,professional.names.rm)
sample_connections<-sample(1:max_connections, 1, replace=FALSE)
sample_prob<-sample(conn_types, sample_connections, replace = T, p = c(0.1,0.1,0.8))
sample.In_Network<-(sample_connections-(count(sample_prob==conn_types[1])$freq[1]))
sample.Out_Network<-(sample_connections-(count(sample_prob==conn_types[2])$freq[1]))
sample.Profess_Link<-(sample_connections-(count(sample_prob==conn_types[3])$freq[1]))
alter.innetwork.i <- sample(ego.df.rm,sample.In_Network,replace = FALSE)
alter.outnetwork.i <- sample(alter.outnetwork.df,sample.Out_Network,replace = FALSE)
alter.profession.i <- sample(professional.names.rm,sample.Profess_Link,replace = FALSE)
#alter.i <- sample(names.sample.list,sample(1:max_connections,1),replace = FALSE)
alter.i<-c(alter.innetwork.i,alter.outnetwork.i,alter.profession.i)
#Check to make sure names are not repeated in vector
alter.i<-union(alter.i,alter.i)
alter.df.i <- cbind(rep(ego.df[i],length(alter.i)),alter.i)
alter.test.df <- rbind(alter.test.df,alter.df.i)
}
str(alter.test.df)
names(alter.test.df)<-c("ego","alter")
# Sample size for generated data
n.edge.indiv <- length(alter.test.df$alter)
# Prospective survey questions and answers
# 1. List individuals with whom you have a working relationship
# Output: qualitative categorical free response
# Above code accounts for this question
# 2. How many years have you known this individual?
# Output: continuous integer
q2.years.known.eiq <- sample(c(1:30), n.edge.indiv, replace = T)
# 3. How many years have you worked with this individual?
# Output: continuous integer
# Value cannot exceed years known
q3.years.worked.with.eiq <- round(runif(n.edge.indiv, min = 0, max = q2.years.known.eiq))
# 4. Please describe your working relationship to this individual
# Output: qualitative categorical, include room for "Explanation" if Other
wk.relationship.options <- c("Employer", "Employee", "Colleague", "Other (please specify)")
q4.wk.relationship.eiq <- sample(wk.relationship.options, n.edge.indiv, replace = T)
q4a.wk.relationship.other.eiq <- ifelse(q4.wk.relationship.eiq == "Other (please specify)", "Explanation", "N/A")
# 5. What is this individual's role in the Georgia coastal shrimp industry?
# Output: qualitative categorical, include room for "Explanation" if Other
ind.role.options <- c("Shrimper (captain)", "Shrimper (deck hand)", "Fisherman (professional or recreationa)", "Dock owner", "Dock employee",
"Georgia Department of Natural Resources", "Georgia Sea Grant Marine Extention", "Shrimp buyer", "Retired", "Other")
q5.ind.role.indiv.eiq <- sample(ind.role.options, n.edge.indiv, replace = T)
q5a.ind.role.indiv.other.eiq <- ifelse(q5.ind.role.indiv.eiq == "Other", "Explanation", "N/A")
# 6. Are you related to this individual?
# Output: binary qualitative
q6.related.indiv.eiq <- sample(binary.qual.options, n.edge.indiv, replace = T)
# 6a. If yes, how so?
# Output: free response
related.options <- c("Parent", "Child", "Spouse or partner", "Cousin", "Other (please specify)")
q6a.related.descriptor.eiq <- ifelse(q6.related.indiv.eiq == "Yes", sample(related.options, n.edge.indiv, replace = T), "N/A")
q6b.related.descriptor.other.eiq <- ifelse(q6a.related.descriptor.eiq == "Other (please specify)", "Explain", "N/A")
# 7. Approximately how frequently do you interact with this individual in a professional, work-related context?
# Output: categorical qualitative
interaction.freq.options <- c("Daily", "A few times per week", "Weekly", "Bi-weekly (every other week)", "A few times per month", "Monthly",
"Less than once per month")
q7.work.interaction.freq.eiq <- sample(interaction.freq.options, n.edge.indiv, replace = T)
# 8. Please describe the nature of your work-related interactions with this individual
# Output: free response
# Example answers: "We shrimp together", "I help her unload shrimp at the dock", "I do maintenance on his boat",
# "I hired him to help me shrimp last season"
# 9. Approximately how often do you interact with this individual outside of work (in your personal time)?
# Output: categorical qualitative
q9.personal.interaction.freq.eiq <- sample(interaction.freq.options, n.edge.indiv, replace = T)
# 10. If applicable, please describe the nature of your nonwork-related interactions with this individual
# Output: free response
# Example answers: "We live together", "I live near her (neighbor)", "We play golf together occasionally", "We go to the same church",
# "N/A"
# 11. Do you discuss work-related hardships or problems (e.g., black gill disease, low shrimp harvests, cheap import competitors,
# high price of fuel and boat maintenance, dock or regulatory complaints) with this individual?
# Output: binary qualitative
q11.hardship.discuss.eiq <- sample(binary.qual.options, n.edge.indiv, replace = T)
# 12. I have a healthy, productive, pleasant working relationship with this individual
# Output: qualitative categorical agree options
q12.positive.wk.relationship.eiq <- sample(agree.options, n.edge.indiv, replace = T)
# 13. Please rate the quality of your working relationship with this individual from 0 (extremely unproductive, unenjoyable)
# to 10 (extremely productive, enjoyable).
# Output: numerical likert scale from 0 (bad) to 10 (good)
q13.wk.relationship.quality.eiq <- sample(c(0:10), n.edge.indiv, replace = T)
# 14. This individual contributes to the well-being and sustainability of the Georgia coastal shrimp industry
# Output: qualitative categorical with possible explanation
q14.sust.industry.contribution.eiq <- sample(agree.options, n.edge.indiv, replace = T)
# 15. Please rank your level of trust of this individual in a professional, work-related context from 0 (I do not trust this person)
# to 10 (I trust this person completely).
# Output: numerical likert scale from 0 (bad) to 10 (good)
q15.trust.level.eiq <- sample(c(0:10), n.edge.indiv, replace = T)
# 16. Please rank your willingness to interact with this individual in a professional, work-related context from 0 (I only work with this person because it is absolutely necessary)
# to 10 (I go out of my way to work with this person).
# Output: numerical likert scale from 0 (bad) to 10 (good)
q16.willingness.to.wk.with.eiq <- sample(c(0:10), n.edge.indiv, replace = T)
########## End Edge (individual to individual) sheet questions. Now time to put it all together into one data frame
# tag for edge individual sheet questions = ".eiq"
eiq<-ls(pattern = ".eiq")
eiq<-mixedsort(eiq)
edge.indiv.test.df <-as.data.frame(cbind(alter.test.df,as.data.frame(mget(eiq))))
names(edge.indiv.test.df)[1]="ego"
names(edge.indiv.test.df)[2]="alter"
write.csv(edge.indiv.test.df,"edge_indiv_test_df_10_15.csv")
############################
#basedirectory <- "C:\\Users\\ahn11803\\Documents\\GitHub\\ICON8002_SNA"
basedirectory <- "/Users/alecnelson/Documents/GitHub/ICON8002_SNA"
#inputdata_path <- "C:\\Users\\ahn11803\\Documents\\GitHub\\ICON8002_SNA\\Data"
input_datapath <- "/Users/alecnelson/Documents/GitHub/ICON8002_SNA/Data"
vertex_datapath <- "vertex_test_df_10_15.csv"
edge_indiv_datapath <- "edge_indiv_test_df_10_15.csv"
setwd(input_datapath)
#List packages used
list.of.packages <- c("igraph","randomNames","fabricatr","plyr","RColorBrewer","keyplayer","sna")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)){install.packages(new.packages)}
#Load all packages
lapply(list.of.packages, require, character.only = TRUE)
edge_indiv_test <- read.csv(edge_indiv_datapath, header=T, row.names = 1)
str(edge_indiv_test)
# Before we merge these data, we need to make sure 'ego' and 'alter' are the
# same across data sets. We can compare each row using the == syntax.
# The command below should return TRUE for every row if all ego rows
# are the same :
unique(sort(vertex_test$ego)) == unique(sort(edge_indiv_test$ego))
test.graph <- graph.data.frame(d = edge_indiv_test)
#Simplify graph?
test.graph_simpl <- simplify(test.graph)
test.graph_simpl_symm <- as.undirected(test.graph_simpl, mode='collapse')
#Can convert to undirected
test.graph_symmetrized <- as.undirected(test.graph, mode='collapse')
plot(test.graph_simpl_symm,
#edge.color=edge_test$connection,
edge.arrow.size=.5,
vertex.color=vertex_test$profession.df,
#vertex.size=((in.degree)*1.5),
vertex.size=5,
vertex.label=NA,
vertex.label.cex=0.7,
vertex.label.dist=1,
vertex.label.degree=-0.6,
main='Test Data Connections (color by profession)',
#frame=TRUE,
margin=0.0001)
vertex_test <- read.csv(vertex_datapath, header=T, row.names = 1)
plot(test.graph_simpl_symm,
#edge.color=edge_test$connection,
edge.arrow.size=.5,
vertex.color=vertex_test$profession.df,
#vertex.size=((in.degree)*1.5),
vertex.size=5,
vertex.label=NA,
vertex.label.cex=0.7,
vertex.label.dist=1,
vertex.label.degree=-0.6,
main='Test Data Connections (color by profession)',
#frame=TRUE,
margin=0.0001)
plot(test.graph_symmetrized,
#edge.color=edge_test$connection,
edge.arrow.size=.5,
vertex.color=colrs[V(test.graph_symmetrized)$community],
vertex.size=((in.degree)*1.5),
vertex.label=vertex_test$profession.df,
vertex.label.cex=0.7,
vertex.label.dist=1,
vertex.label.degree=-0.6,
main='Test Data Connections (color by profession/community)',
#frame=TRUE,
margin=0.0001)
plot(test.graph_symmetrized,
layout=(layout.graph*1.1),
rescale=F,
#edge.color=edge_test$connection,
edge.arrow.size=.5,
vertex.color=vertex_test$profession.df,
#vertex.size=((in.degree)*1.5),
vertex.size=3,
#vertex.label= ifelse(vertex_test$ego == as.character(vertex_test$ego[4]), as.character(vertex_test$ego), NA),
vertex.label=NA,
vertex.label.cex=1.0,
vertex.label.dist=0,
vertex.label.degree=0,
main='Test Data Connections (color by profession)',
#frame=TRUE,
margin=0.0001)
layout.graph <- layout_(test.graph_symmetrized, nicely())
layout.graph<-norm_coords(layout.graph, ymin=-1, ymax=1, xmin=-1, xmax=1)
plot(test.graph_symmetrized,
layout=(layout.graph*1.1),
rescale=F,
#edge.color=edge_test$connection,
edge.arrow.size=.5,
vertex.color=vertex_test$profession.df,
#vertex.size=((in.degree)*1.5),
vertex.size=3,
#vertex.label= ifelse(vertex_test$ego == as.character(vertex_test$ego[4]), as.character(vertex_test$ego), NA),
vertex.label=NA,
vertex.label.cex=1.0,
vertex.label.dist=0,
vertex.label.degree=0,
main='Test Data Connections (color by profession)',
#frame=TRUE,
margin=0.0001)
layout.graph <- layout_(test.graph_symmetrized, nicely())
layout.graph<-norm_coords(layout.graph, ymin=-1, ymax=1, xmin=-1, xmax=1)
plot(test.graph_symmetrized,
layout=(layout.graph*1.1),
rescale=F,
#edge.color=edge_test$connection,
edge.arrow.size=.5,
vertex.color=vertex_test$profession.df,
#vertex.size=((in.degree)*1.5),
vertex.size=3,
#vertex.label=vertex_test$profession.df,
vertex.label=NA,
vertex.label.cex=0.7,
vertex.label.dist=1,
vertex.label.degree=-0.6,
main='Test Data Connections (color by profession)',
#frame=TRUE,
margin=0.0001)
#############################################
setwd(input_datapath)
pdf("SNA_Output_alter_test_10_15_nicely.pdf")
plot(test.graph_symmetrized,
layout=(layout.graph*1.1),
rescale=F,
#edge.color=edge_test$connection,
edge.arrow.size=.5,
vertex.color=vertex_test$profession.df,
#vertex.size=((in.degree)*1.5),
vertex.size=3,
#vertex.label=vertex_test$profession.df,
vertex.label=NA,
vertex.label.cex=0.7,
vertex.label.dist=1,
vertex.label.degree=-0.6,
main='Test Data Connections (color by profession)',
#frame=TRUE,
margin=0.0001)
dev.off()
pdf("SNA_Output_alter_test_10_15_nicely.pdf")
plot(test.graph_symmetrized,
layout=(layout.graph*1.0),
rescale=F,
#edge.color=edge_test$connection,
edge.arrow.size=.5,
vertex.color=vertex_test$profession.df,
#vertex.size=((in.degree)*1.5),
vertex.size=3,
#vertex.label=vertex_test$profession.df,
vertex.label=NA,
vertex.label.cex=0.7,
vertex.label.dist=1,
vertex.label.degree=-0.6,
main='Test Data Connections (color by profession)',
#frame=TRUE,
margin=0.0001)
dev.off()
